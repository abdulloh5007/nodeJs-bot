require('dotenv').config();
const { formatNumberInScientificNotation } = require('../systems/systemRu');
const { donatedUsers } = require('../donate/donatedUsers');
const { mongoConnect, chatName } = require('../../mongoConnect');
const adminId = parseInt(process.env.ADMIN_ID_INT)

async function autoCreatePromoCodes(bot) {
    const collectionPromo = await mongoConnect('promo')

    const randomPromoName = generateRandomString(10);
    const randomActivation = Math.floor(Math.random() * 11)
    const randomAmount = generateRandomNumber(50000)
    function getRandomText(textOptions) {
        const randomIndex = Math.floor(Math.random() * textOptions.length);
        return textOptions[randomIndex];
    }

    const promoComents = ['–°–∫–æ—Ä–æ –∑–∏–º–∞ü•∂', '–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!ü§©', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–πü´°'];
    const randomText = getRandomText(promoComents);
    const finishedAmountForOne = Math.floor(randomAmount / randomActivation)

    let channelId = chatName
    await bot.sendMessage(channelId, `
<i>üíæ–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ü§ñ</i>

‚îå<i>üìå–ö–ª–∏–∫:</i> <code>–ø—Ä–æ–º–æ ${randomPromoName}</code>
‚îú<i>üîë–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</i> <b>${randomActivation}</b>
‚îî<i>üí∏–ü—Ä–∏–∑ –∫–∞–∂–¥–æ–º—É –ø–æ:</i> <b>${finishedAmountForOne.toLocaleString('de-DE')}$ ${formatNumberInScientificNotation(finishedAmountForOne)}</b>

<i>‚úâÔ∏è–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏:</i> <b><u>${randomText}</u></b>
        `, {
        parse_mode: 'HTML',
    }).then(() => {

    }).catch(async err => {
        await bot.sendMessage(adminId, `Bot is not a member channel chat`)
        console.log('channel error ' + err);
    })
    await collectionPromo.insertOne({
        promoName: randomPromoName,
        promoActivision: parseInt(randomActivation),
        promoMoney: parseInt(Math.floor(randomAmount)),
        promoDonate: false,
        promoComent: promoComents,
        promoUsedBy: []
    })
}

async function autoDeleteAllPromocodes(bot) {
    const collectionPromo = await mongoConnect('promo')

    await collectionPromo.deleteMany({ _id: ObjectId }).then(() => {
        bot.sendMessage(adminId, `
–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        `)
    })
}

async function manualDeleteAllPromocodes(bot) {
    const collectionPromo = await mongoConnect('promo')

    await collectionPromo.deleteMany({ _id: ObjectId }).then(() => {
        bot.sendMessage(adminId, `
–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –≤ —Ä—É—á–Ω—É—é
        `)
    })
}

async function manualCreatePromoCodes(msg, bot, collection) {
    const collectionPromo = await mongoConnect('promo')

    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const randomPromoName = generateRandomString(10);
    const randomActivation = Math.floor(Math.random() * 11) + 1
    const randomAmount = generateRandomNumber(30000)
    const finishedAmountForOne = Math.floor(randomAmount / randomActivation)
    
    function getRandomText(textOptions) {
        const randomIndex = Math.floor(Math.random() * textOptions.length);
        return textOptions[randomIndex];
    }

    const promoComents = ['–°–∫–æ—Ä–æ –∑–∏–º–∞ü•∂', '–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!ü§©', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–πü´°'];
    const randomText = getRandomText(promoComents);
    if (userId1 === adminId) {
        let channelId = chatName
        await bot.sendMessage(channelId, `
<i>üíæ–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ü§ñ</i>

‚îå<i>üìå–ö–ª–∏–∫:</i> <code>–ø—Ä–æ–º–æ ${randomPromoName}</code>
‚îú<i>üîë–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</i> <b>${randomActivation}</b>
‚îî<i>üí∏–ü—Ä–∏–∑ –∫–∞–∂–¥–æ–º—É –ø–æ:</i> <b>${finishedAmountForOne.toLocaleString('de-DE')}$ ${formatNumberInScientificNotation(finishedAmountForOne)}</b>

<i>‚úâÔ∏è–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏:</i> <b><u>${randomText}</u></b>
        `, {
            parse_mode: 'HTML',
        }).then(() => {

        }).catch(async err => {
            await bot.sendMessage(adminId, `Bot is not a member of the channel chat`)
            console.log('channel error ' + err);
        })
        await collectionPromo.insertOne({
            promoName: randomPromoName,
            promoActivision: parseInt(randomActivation),
            promoMoney: parseInt(randomAmount),
            promoDonate: false,
            promoComent: promoComents,
            promoUsedBy: []
        })
    }
    else {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
            `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }
}

function generateRandomNumber(num) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    return Math.floor(Math.random() * num);
}

function generateRandomString(length) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * charactersLength);
        result += characters.charAt(randomIndex);
    }
    return result;
}

module.exports = {
    autoCreatePromoCodes,
    manualCreatePromoCodes,
    manualDeleteAllPromocodes,
    autoDeleteAllPromocodes,
}
const { mongoConnect } = require("../../mongoConnect");
const { againGameOptions } = require("../../options");
const { donatedUsers, adminDonatedUsers } = require("../donate/donatedUsers");
const { parseNumber, formatNumberInScientificNotation } = require("../systems/systemRu");
const { gameWinStickers, gameLoseStickers } = require("./gameStickers");


/**
 * Asynchronous function that handles the logic for a casino game.
 * @param {Object} msg - Message object containing information about the chat, text, sender, and message ID.
 * @param {Object} collection - MongoDB collection object used to interact with the database.
 * @param {Object} bot - Telegram bot object used to send messages.
 * @param {number} valueIndex - Index indicating the position of the value in the text input.
 */
async function kazino(msg, collection, bot, valueIndex) {
    const collectionAchievs = await mongoConnect('achievs');

    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;
    let isGameInProgress = true

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>–∫–∞–∑–∏–Ω–æ 10</code>
    `;
        const options = { reply_to_message_id: messageId, parse_mode: 'HTML' };
        bot.sendMessage(chatId, errorMessage, options);
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        await bot.sendMessage(chatId, '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>', { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 100);

    let winCoefficient = 0;
    let resultText = '';

    if (randomNum < 10) {
        winCoefficient = 5;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 5x';
    } else if (randomNum < 30) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
    } else if (randomNum < 50) {
        winCoefficient = 1;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1x';
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
    }

    await collection.updateOne({ id: userId }, { $inc: { balance: -value } })

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient >= 1 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }
    try {
        await collection.updateOne({ id: userId }, { ...ratesUpdate });
        await collection.updateOne({ id: userId }, { $inc: { balance: winAmount } })
    } catch (error) {
        console.log(error);
    }

    const achiev = await collectionAchievs.findOne({ id: userId })
    const kazino = achiev.kazino[0].kazino
    const maxKazino = achiev.kazino[0].maxKazino
    const kazinoCost = achiev.kazino[0].cost
    if (kazino < maxKazino + 1) {
        await collectionAchievs.updateOne({ id: userId }, { $inc: { "kazino.0.kazino": 1 } })
    }

    if (kazino === maxKazino - 1) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—ã–≥—Ä–∞—Ç—å –∫–∞–∑–∏–Ω–æ ${maxKazino} —Ä–∞–∑ ‚úÖ
<b>–í–∞–º –≤—ã–¥–∞–Ω–æ ${kazinoCost} UC</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        await collection.updateOne({ id: userId }, { $inc: { uc: kazinoCost } })
    }

    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

/**
 * Handles the spinning of a game.
 * @param {object} msg - The message object containing information about the chat, text, user, and message ID.
 * @param {object} bot - The bot object with methods for sending messages and dice.
 * @param {object} collection - The collection object for accessing the database.
 * @param {number} valueIndex - The index of the value in the command text.
 */
async function gameSpin(msg, bot, collection, valueIndex) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;
    let isGameInProgress = true

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>—Å–ø–∏–Ω 10</code>
    `;
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        const errorMessage = '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>';
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 100);

    let winCoefficient = 0;
    let resultText = '';

    if (randomNum < 30) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
    }

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;
    const newBalance = resultText.includes('–≤—ã–∏–≥—Ä–∞–ª–∏') ? balance + winAmount : balance - value;
    const againGameOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑', switch_inline_query_current_chat: '—Å–ø–∏–Ω ' }]
            ]
        }
    }

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient === 2 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    const opt = { emoji: 'üé∞', value: randomNum };

    bot.sendDice(chatId, opt).then(async () => {
        await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });
    });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }

    collection.updateOne({ id: userId }, { $set: { balance: newBalance }, ...ratesUpdate });
    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

/**
 * Handles the spinning of a game.
 * @param {object} msg - The message object containing information about the chat, text, user, and message ID.
 * @param {object} bot - The bot object with methods for sending messages and dice.
 * @param {object} collection - The collection object for accessing the database.
 * @param {number} valueIndex - The index of the value in the command text.
 */
async function gameBouling(msg, bot, collection, valueIndex) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;
    let isGameInProgress = true

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>–±–æ—É–ª 10</code>
    `;
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        const errorMessage = '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>';
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 100);

    let winCoefficient = 0;
    let resultText = '';

    if (randomNum < 30) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
    }

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;
    const newBalance = resultText.includes('–≤—ã–∏–≥—Ä–∞–ª–∏') ? balance + winAmount : balance - value;
    const againGameOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑', switch_inline_query_current_chat: '–±–æ—É–ª ' }]
            ]
        }
    }

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient === 2 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    const opt = { emoji: 'üé≥', value: randomNum };

    bot.sendDice(chatId, opt).then(async () => {
        await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });
    });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }

    collection.updateOne({ id: userId }, { $set: { balance: newBalance }, ...ratesUpdate });
    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

/**
 * Handles the spinning of a game.
 * @param {object} msg - The message object containing information about the chat, text, user, and message ID.
 * @param {object} bot - The bot object with methods for sending messages and dice.
 * @param {object} collection - The collection object for accessing the database.
 * @param {number} valueIndex - The index of the value in the command text.
 */
async function gameFootball(msg, bot, collection, valueIndex) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;
    let isGameInProgress = true

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>—Ñ—É—Ç–±–æ–ª 10</code>
    `;
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        const errorMessage = '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>';
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 20);

    let winCoefficient = 0;
    let resultText = '';
    let winValue;

    if (randomNum < 5) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
        winValue = 5;
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
        winValue = 4;
    }

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;
    const newBalance = resultText.includes('–≤—ã–∏–≥—Ä–∞–ª–∏') ? balance + winAmount : balance - value;
    const againGameOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑', switch_inline_query_current_chat: '—Ñ—É—Ç–±–æ–ª ' }]
            ]
        }
    }

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient === 2 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    const opt = { emoji: '‚öΩÔ∏è', value: winValue };

    bot.sendDice(chatId, opt).then(async () => {
        await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });
    });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }

    collection.updateOne({ id: userId }, { $set: { balance: newBalance }, ...ratesUpdate });
    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

async function gameRice(msg, bot, collection, valueIndex) {
    const collectionAchievs = await mongoConnect('achievs');
    const collectionCars = await mongoConnect('cars');
    let isGameInProgress;

    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const text = msg.text

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userCar = user.properties[0].cars
    const userCarSt = user.properties[0].carStatus
    const userCarGas = user.properties[0].carGasoline
    const userStatus = user.status[0].statusName
    const balance = user.balance
    const car = await collectionCars.findOne({ name: user.properties[0].cars })

    const parts = text.split(' ')

    if (parts.length <= valueIndex) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–±–≥–æ–Ω–∫–∞ 1–µ3</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    const summ = parseInt(parseNumber(parts[valueIndex]))

    const riceKb = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üïπ–°—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ', switch_inline_query_current_chat: '–±–≥–æ–Ω–∫–∞ 1–µ3' }]
            ]
        }
    }

    if (userCar === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É
<code>–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É 1</code> - –ø–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã 
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (isNaN(summ) || summ <= 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...riceKb,
        })
        return;
    }

    if (summ > balance) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...riceKb,
        })
        return;
    }

    if (userCarGas <= 10) {
        const carGasKb = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üõ¢–ü–æ–π—Ç–∏ –≤ –∑–∞–ø—Ä–∞–≤–∫—É', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–ø—Ä–∞–≤–∏—Ç—å' }]
                ]
            }
        }
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã –ø–æ—á—Ç–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–Ω–∑–∏–Ω–∞ üõ¢
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...carGasKb,
        })
        return;
    }

    if (userCarSt <= 10) {
        const carStKb = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üõ†–ü–æ–π—Ç–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è' }]
                ]
            }
        }
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤–∞—à–∞ –º–∞—à–∏–Ω–∞ –ø–æ—á—Ç–∏ —Å–ª–æ–º–∞–Ω–∞ –Ω—É–∂–Ω–æ –ø–æ–π—Ç–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é üõ†
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...carStKb,
        })
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    function getRandomNumber(min, max) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç min (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –¥–æ max (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    const carSpeed = car.speed
    const botSpeed = userStatus === 'halloween' ? 20 : 50
    const successTxtHelloween = userStatus === 'halloween' ? `${userDonateStatus} –≤–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–º–æ–≥ —É—Å–∫–æ—Ä–∏—Ç—å –≤–∞—à—É –º–∞—à–∏–Ω—É !` : ''
    isGameInProgress = false;

    let inGameUserCarSpeed = getRandomNumber(70, carSpeed)
    let inGameBotCarSpeed = getRandomNumber(70, carSpeed + botSpeed)

    let resultText = `<i>–ñ–∞–ª—å</i> <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x</b> ${gameLoseStickers()}\n<b>-${summ}</b>\n\n<i>–ú–∞—à–∏–Ω–∞ –±–æ—Ç–∞ –æ–±–æ–≥–Ω–∞–ª–∞ –≤–∞—à—É –º–∞—à–∏–Ω—É –¥–æ—Å—Ç–∏–≥–∞—è —Å–∫–æ—Ä–æ—Å—Ç–∏:</i> <b>${inGameBotCarSpeed} –∫–º/—á</b>\n<i>–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞:</i> <b>${inGameUserCarSpeed} –∫–º/—á</b>`;
    let winValue = 0;

    if (inGameUserCarSpeed >= inGameBotCarSpeed) {
        winValue = Math.floor(summ * 2);
        resultText = `<i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i> <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x ${gameWinStickers()}</b>\n<b>+${winValue}</b>\n\n<i>–°–∫–æ—Ä–æ—Å—Ç—å –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã –¥–æ—Å—Ç–∏–≥–ª–∞ –¥–æ:</i> ${inGameUserCarSpeed} –∫–º/—á\n${successTxtHelloween}`;
    }

    await collection.updateOne({ id: userId1 }, { $inc: { balance: -summ } })

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —Å—ã–≥—Ä–∞–ª–∏ –≥–æ–Ω–∫—É üèé

${resultText}
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
        ...riceKb,
    })
    await collection.updateOne({ id: userId1 }, { $inc: { balance: winValue, "properties.0.carStatus": -10, "properties.0.carGasoline": -10 } })

    const achiev = await collectionAchievs.findOne({ id: userId1 })
    const botRacing = achiev.race[0].botRacing
    const maxBotRacing = achiev.race[0].maxBotRacing
    const raceCost = achiev.race[0].cost

    if (botRacing < maxBotRacing + 1) {
        await collectionAchievs.updateOne({ id: userId1 }, { $inc: { "race.0.botRacing": 1 } })
    }

    if (botRacing === maxBotRacing - 1) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É —Å –±–æ—Ç–æ–º ${maxBotRacing} —Ä–∞–∑ ‚úÖ
<b>–í–∞–º –≤—ã–¥–∞–Ω–æ ${raceCost} UC</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        collection.updateOne({ id: userId1 }, { $inc: { uc: raceCost } })
    }

    setTimeout(() => {
        isGameInProgress = true;
    }, 5000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

async function gameRiceWithUser(msg, bot, collection, valueIndex) {
    const text = msg.text.split(' ')
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const secondUser = msg.reply_to_message

    const userDonateStatus = await donatedUsers(msg, collection)
    const user1 = await collection.findOne({ id: userId1 })

    if (text.length <= valueIndex) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–≥–æ–Ω–∫–∞ 1–µ3</code> –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    const summ = parseInt(parseNumber(text[valueIndex]))
    if (isNaN(summ)) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    if (secondUser === undefined) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, –æ—Ç–≤–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    if (secondUser.from.id === userId1) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, <b>–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É —Å–∞–º–∏–º !</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    let riceOptsWithBot = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º', switch_inline_query_current_chat: '–±–≥–æ–Ω–∫–∞ 1–µ3' }]
            ]
        }
    }

    if (secondUser.from.is_bot === true) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É —Å –±–æ—Ç–æ–º
–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É —Å –±–æ—Ç–æ–º —Ç–æ –Ω–∏–∂–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...riceOptsWithBot,
        })
    }

    const user2 = await collection.findOne({ id: secondUser.from.id })

    if (!user2) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω 
<b>–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ —á—Ç–æ–±—ã –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    const user1CarName = user1.properties[0].cars
    const user2CarName = user2.properties[0].cars

    if (user1CarName === '') {
        return bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –º–∞—à–∏–Ω—ã –¥–ª—è –∏–≥—Ä—ã –≥–æ–Ω–∫–∞
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }
    if (user2CarName === '') {
        return bot.sendMessage(chatId, `
${userDonateStatus}, —É –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É –Ω–µ—Ç—É –º–∞—à–∏–Ω—ã
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    const user2Bal = user2.balance
    const user1Bal = user1.balance

    if (summ > user1Bal) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    if (summ > user2Bal) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, —É –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    const gameRiceBtns = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ–ü—Ä–∏–Ω—è—Ç—å', callback_data: `riceWithUserAcc_${userId1}_${secondUser.from.id}_${summ}` }],
                [{ text: '‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `riceWithUserRej_${userId1}_${secondUser.from.id}_${summ}` }]
            ]
        }
    }
    bot.sendMessage(chatId, `
${userDonateStatus}, —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫–∞ —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É —Å –≤–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ 
<b>–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –û—Ç–∫–∞–∑–∞—Ç—å</b> –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: secondUser.message_id,
        ...gameRiceBtns,
    })
}

async function gameRiceWithUserBtns(msg, bot, collection) {
    const collectionCars = await mongoConnect('cars');

    const data = msg.data
    const userId1 = msg.from.id
    const chatId = msg.message.chat.id
    const messageId = msg.message.message_id
    const [txt, user1Sender2, user2Accepter2, summ2] = data.split('_')
    const user1Sender = parseInt(user1Sender2)
    const user2Accepter = parseInt(user2Accepter2)
    const summ = parseInt(summ2)

    const firstUserDonateStatus = await adminDonatedUsers(user1Sender, collection)
    const secondUserDonateStatus = await adminDonatedUsers(user2Accepter, collection)

    const user1 = await collection.findOne({ id: user1Sender })
    const user2 = await collection.findOne({ id: user2Accepter })
    if (txt === 'riceWithUserRej') {
        if (userId1 === user2Accepter || userId1 === user1Sender) {
            bot.editMessageText(`
<b>–ì–æ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b> ${userId1 === user1Sender ? firstUserDonateStatus : secondUserDonateStatus}
                    `, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
            })

            if (userId1 === user2Accepter) {
                try {
                    await bot.sendMessage(user1Sender, `
${secondUserDonateStatus}, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≥–æ–Ω–∫—É –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º
                            `, {
                        parse_mode: 'HTML',
                    })
                } catch (error) {
                    // error message
                    console.log('error in game with user ' + error);
                }
            }
            return;
        }
        bot.answerCallbackQuery(msg.id, { show_alert: true, text: '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è' })
        return;
    }

    if (!user1 || !user2) {
        return bot.editMessageText(`–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞`, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML'
        })
    }
    const user1CarName = user1.properties[0].cars
    const user2CarName = user2.properties[0].cars
    const user1Bal = user1.balance
    const user2Bal = user2.balance

    const user1CarGasoilne = user1.properties[0].carGasoline
    const user1CarStatus = user1.properties[0].carStatus
    const user2CarGasoilne = user2.properties[0].carGasoline
    const user2CarStatus = user2.properties[0].carStatus

    const user1Car = await collectionCars.findOne({ name: user1CarName })
    const user2Car = await collectionCars.findOne({ name: user2CarName })

    if (txt === 'riceWithUserAcc') {
        if (userId1 !== user2Accepter) {
            bot.answerCallbackQuery(msg.id, { show_alert: true, text: '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è', })
            return;
        }

        if (summ > user1Bal) {
            bot.editMessageText(`
${firstUserDonateStatus}, —É –Ω–µ–≥–æ –ª–∏–±–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ –ª–∏–±–æ –¥–∞–ª –∫–æ–º—É —Ç–æ
            `, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
            })

            try {
                await bot.sendMessage(user1Sender, `
${firstUserDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã –≥–æ–Ω–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${secondUserDonateStatus} –ø–æ—ç—Ç–æ–º—É –∏–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
                `, {
                    parse_mode: 'HTML',
                })
            } catch (error) {
                console.log('error in game rice with user send money ' + error);
            }
            return;
        }

        if (summ > user2Bal) {
            bot.answerCallbackQuery(msg.id, {
                parse_mode: 'HTML',
                show_alert: true,
                text: `
—É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏–µ –≥–æ–Ω–∫–∏
                `
            })
            return;
        }

        if (user1CarGasoilne <= 10 || user1CarStatus <= 10) {
            bot.editMessageText(`
${firstUserDonateStatus}, —É –Ω–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–Ω–∑–∏–Ω–∞ –∏ —É –Ω–µ–≥–æ –º–∞—à–∏–Ω–∞ —Å–ª–æ–º–∞–Ω–∞
            `, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML',
            })

            try {
                await bot.sendMessage(user1Sender, `
${firstUserDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ –±–µ–Ω–∑–∏–Ω–∞ –∏ –≤–∞—à–∞ –º–∞—à–∏–Ω–∞ –±—ã–ª–∞ —Å–ª–æ–º–∞–Ω–∞ –¥–ª—è –∏–≥—Ä—ã –≥–æ–Ω–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${secondUserDonateStatus} –ø–æ—ç—Ç–æ–º—É –∏–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
                `, {
                    parse_mode: 'HTML',
                })
            } catch (error) {
                console.log('error in game rice with user send money ' + error);
            }
            return;
        }

        if (user2CarGasoilne <= 10 || user2CarStatus <= 10) {
            bot.answerCallbackQuery(msg.id, {
                parse_mode: 'HTML',
                show_alert: true,
                text: `
—É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–µ–Ω–∑–∏–Ω–∞ –∏ –≤–∞—à–∞ –º–∞—à–∏–Ω–∞ —Å–ª–æ–º–∞–Ω–∞
–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≥–æ–Ω–∫—É –ø–æ—á–∏–Ω–∏—Ç–µ –º–∞—à–∏–Ω—É –∏ –∑–∞–ø—Ä–∞–≤—å—Ç–µ
                `
            })
            return;
        }

        function getRandomNumber(min, max) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç min (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –¥–æ max (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            return Math.floor(Math.random() * (max - min + 1) + min);
        }
        const user1FindedCarName = user1Car.name
        const user2FindedCarName = user2Car.name
        const user1FindedCarSpeed = user1Car.speed
        const user2FindedCarSpeed = user2Car.speed

        const winnerPrice = Math.floor(summ * 2)
        const user1RandomedSpeed = getRandomNumber(70, user1FindedCarSpeed)
        const user2RandomedSpeed = getRandomNumber(70, user2FindedCarSpeed)
        async function findLargerNumber(number1, number2) {
            if (number1 > number2) {
                try {
                    await bot.sendMessage(user1Sender, `
${firstUserDonateStatus}, –≤—ã–∏–≥—Ä—ã—à –µ—Å—Ç—å –º–æ–∂–Ω–æ –ø–æ–µ—Å—Ç—å !
<b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${winnerPrice.toLocaleString('de-DE')} ${formatNumberInScientificNotation(winnerPrice)} $</b>

<b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –≥–æ–Ω–∫–µ —Å –∏–≥—Ä–æ–∫–æ–º ${secondUserDonateStatus}</b>
                    `, {
                        parse_mode: 'HTML',
                    })

                    await bot.sendMessage(user2Accepter, `
${secondUserDonateStatus}, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–≤–µ–∑—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
<b>–° –≤–∞—Å –æ—Ç–Ω—è–ª–∏ ${summ.toLocaleString('de-DE')} ${formatNumberInScientificNotation(summ)} $</b>

<b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –≥–æ–Ω–∫–µ —Å –∏–≥—Ä–æ–∫–æ–º ${firstUserDonateStatus}</b>
                    `, {
                        parse_mode: 'HTML',
                    })

                    await collection.updateOne({ id: user1Sender }, { $inc: { balance: summ } })
                    await collection.updateOne({ id: user2Accepter }, { $inc: { balance: -summ } })
                } catch (error) {
                    console.log('error winner winner chicken dinner firstUser' + error);
                }
                return `${firstUserDonateStatus}`;
            } else {
                try {
                    await bot.sendMessage(user2Accepter, `
${secondUserDonateStatus}, –≤—ã–∏–≥—Ä—ã—à –µ—Å—Ç—å –º–æ–∂–Ω–æ –ø–æ–µ—Å—Ç—å !
<b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${winnerPrice.toLocaleString('de-DE')} ${formatNumberInScientificNotation(winnerPrice)} $</b>

<b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –≥–æ–Ω–∫–µ —Å –∏–≥—Ä–æ–∫–æ–º ${firstUserDonateStatus}</b>
                    `, {
                        parse_mode: 'HTML',
                    })

                    await bot.sendMessage(user1Sender, `
${firstUserDonateStatus}, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–≤–µ–∑—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
<b>–° –≤–∞—Å –æ—Ç–Ω—è–ª–∏ ${summ.toLocaleString('de-DE')} ${formatNumberInScientificNotation(summ)} $</b>

<b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –≥–æ–Ω–∫–µ —Å –∏–≥—Ä–æ–∫–æ–º ${secondUserDonateStatus}</b>
                    `, {
                        parse_mode: 'HTML',
                    })

                    await collection.updateOne({ id: user2Accepter }, { $inc: { balance: summ } })
                    await collection.updateOne({ id: user1Sender }, { $inc: { balance: -summ } })
                } catch (error) {
                    console.log('error winner winner chicken dinner seondUser' + error);
                }
                return `${secondUserDonateStatus}`;
            }
        }
        await collection.updateOne({ id: user2Accepter }, { $inc: { "properties.0.carStatus": -10, "properties.0.carGasoline": -10 } })
        await collection.updateOne({ id: user1Sender }, { $inc: { "properties.0.carStatus": -10, "properties.0.carGasoline": -10 } })
        const riceWinner = await findLargerNumber(user1RandomedSpeed, user2RandomedSpeed)

        bot.editMessageText(`
<b>–ò–≥—Ä–∞ –≥–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏</b>
${firstUserDonateStatus} –∏ ${secondUserDonateStatus}

<i>–£ ${firstUserDonateStatus} –º–∞—à–∏–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–∫–æ—Ä–æ—Å—Ç—å:</i> <b>${user1RandomedSpeed} –∫–º/—á</b>
<i>A —É ${secondUserDonateStatus} –º–∞—à–∏–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–∫–æ—Ä–æ—Å—Ç—å:</i> <b>${user2RandomedSpeed} –∫–º/—á</b>

<i>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</i> ${riceWinner}
        `, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML',
        })
        return;
    }
}

async function gameRiceNeed(msg, bot, collection, valueIndex) {
    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userCar = user.properties[0].cars
    const userCarSt = user.properties[0].carStatus
    const userCarGas = user.properties[0].carGasoline
    const balance = user.balance

    const parts = text.split(' ')
    let carSetting = parts[valueIndex]

    const datamap = {
        '–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è': { item: 'carStatus', need: userCarSt, cost: 30, txt: '–ø–æ—à–ª–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –∏ –ø–æ—á–∏–Ω–∏–ª–∏ –≤–∞—à—É –º–∞—à–∏–Ω—É üõ†', img: 'https://amastercar.ru/img/auto_service_new.jpg' },
        '–∑–∞–ø—Ä–∞–≤–∏—Ç—å': { item: 'carGasoline', need: userCarGas, cost: 20, txt: '–∑–∞–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à—É –º–∞—à–∏–Ω—É üõ¢', img: 'https://auto.24tv.ua/resources/photos/news/202006/21771a2f138da-a6a9-40a0-b446-f6830be35db7.jpg?1592310798000&fit=cover&w=720&h=405&q=65' },
    }

    const carSettingKb = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üõ†–ü–æ–π—Ç–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è' }, { text: 'üõ¢–ü–æ–π—Ç–∏ –≤ –∑–∞–ø—Ä–∞–≤–∫—É', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–ø—Ä–∞–≤–∏—Ç—å' }]
            ]
        }
    }
    if (!carSetting || !(carSetting in datamap)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...carSettingKb,
        })
        return;
    }

    carSetting = parts[valueIndex].toLowerCase()

    if (carSetting in datamap) {
        if (userCar === '') {
            bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ
<code>–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É 1</code> –∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        const { item, need, cost, txt, img } = datamap[carSetting]
        const riceKb = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üïπ–°—ã–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É', switch_inline_query_current_chat: '–±–≥–æ–Ω–∫–∞ 1–µ3' }]
                ]
            }
        }

        if (need > 10) {
            bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –µ—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ã–≥—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–Ω–æ–∫ üèé
<i>–ü–æ–∏–≥—Ä–∞–µ–º ?!</i>
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
                ...riceKb,
            })
            return;
        }

        const findNeed = Math.floor(100 - need)
        const valueCost = Math.floor(cost * findNeed)

        if (valueCost > balance) {
            bot.sendMessage(chatId, `
${userDonateStatus}, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ${valueCost.toLocaleString('de-DE')} –Ω—É–∂–Ω–æ –≤ –±–∞–ª–∞–Ω—Å
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        bot.sendPhoto(chatId, img, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            caption: `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ ${txt}
<i>–ó–∞ ¬ª</i> <b>${valueCost.toLocaleString('de-DE')} $ ${formatNumberInScientificNotation(valueCost)}</b>
            `
        })
        const updateObj = {}
        updateObj[`properties.0.${item}`] = findNeed

        await collection.updateOne({ id: userId1 }, { $inc: { balance: -valueCost } })
        await collection.updateOne({ id: userId1 }, { $inc: updateObj })
    }
}

module.exports = {
    kazino,
    gameSpin,
    gameBouling,
    gameFootball,
    gameRice,
    gameRiceNeed,
    gameRiceWithUser,
    gameRiceWithUserBtns,
};
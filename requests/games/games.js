const { mongoConnect } = require("../../mongoConnect");
const { againGameOptions } = require("../../options");
const { donatedUsers } = require("../donate/donatedUsers");
const { parseNumber, formatNumberInScientificNotation } = require("../systems/systemRu");
const { gameWinStickers, gameLoseStickers } = require("./gameStickers");

let isGameInProgress = true; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã

/**
 * Asynchronous function that handles the logic for a casino game.
 * @param {Object} msg - Message object containing information about the chat, text, sender, and message ID.
 * @param {Object} collection - MongoDB collection object used to interact with the database.
 * @param {Object} bot - Telegram bot object used to send messages.
 * @param {number} valueIndex - Index indicating the position of the value in the text input.
 */
async function kazino(msg, collection, bot, valueIndex) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>–∫–∞–∑–∏–Ω–æ 10</code>
    `;
        const options = { reply_to_message_id: messageId, parse_mode: 'HTML' };
        bot.sendMessage(chatId, errorMessage, options);
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        await bot.sendMessage(chatId, '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>', { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 100);

    let winCoefficient = 0;
    let resultText = '';

    if (randomNum < 7) {
        winCoefficient = 5;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 5x';
    } else if (randomNum < 15) {
        winCoefficient = 3;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 3x';
    } else if (randomNum < 20) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
    } else if (randomNum < 40) {
        winCoefficient = 1;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1x';
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
    }

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;
    const newBalance = resultText.includes('–≤—ã–∏–≥—Ä–∞–ª–∏') ? balance + winAmount : balance - value;

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient >= 1 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }

    collection.updateOne({ id: userId }, { $set: { balance: parseInt(newBalance) }, ...ratesUpdate });
    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

/**
 * Handles the spinning of a game.
 * @param {object} msg - The message object containing information about the chat, text, user, and message ID.
 * @param {object} bot - The bot object with methods for sending messages and dice.
 * @param {object} collection - The collection object for accessing the database.
 * @param {number} valueIndex - The index of the value in the command text.
 */
async function gameSpin(msg, bot, collection, valueIndex) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>—Å–ø–∏–Ω 10</code>
    `;
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        const errorMessage = '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>';
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 100);

    let winCoefficient = 0;
    let resultText = '';

    if (randomNum < 30) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
    }

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;
    const newBalance = resultText.includes('–≤—ã–∏–≥—Ä–∞–ª–∏') ? balance + winAmount : balance - value;
    const againGameOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑', switch_inline_query_current_chat: '—Å–ø–∏–Ω ' }]
            ]
        }
    }

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient === 2 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    const opt = { emoji: 'üé∞', value: randomNum };

    bot.sendDice(chatId, opt).then(async () => {
        await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });
    });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }

    collection.updateOne({ id: userId }, { $set: { balance: newBalance }, ...ratesUpdate });
    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

/**
 * Handles the spinning of a game.
 * @param {object} msg - The message object containing information about the chat, text, user, and message ID.
 * @param {object} bot - The bot object with methods for sending messages and dice.
 * @param {object} collection - The collection object for accessing the database.
 * @param {number} valueIndex - The index of the value in the command text.
 */
async function gameBouling(msg, bot, collection, valueIndex) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>–±–æ—É–ª 10</code>
    `;
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        const errorMessage = '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>';
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 100);

    let winCoefficient = 0;
    let resultText = '';

    if (randomNum < 30) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
    }

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;
    const newBalance = resultText.includes('–≤—ã–∏–≥—Ä–∞–ª–∏') ? balance + winAmount : balance - value;
    const againGameOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑', switch_inline_query_current_chat: '–±–æ—É–ª ' }]
            ]
        }
    }

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient === 2 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    const opt = { emoji: 'üé≥', value: randomNum };

    bot.sendDice(chatId, opt).then(async () => {
        await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });
    });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }

    collection.updateOne({ id: userId }, { $set: { balance: newBalance }, ...ratesUpdate });
    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

/**
 * Handles the spinning of a game.
 * @param {object} msg - The message object containing information about the chat, text, user, and message ID.
 * @param {object} bot - The bot object with methods for sending messages and dice.
 * @param {object} collection - The collection object for accessing the database.
 * @param {number} valueIndex - The index of the value in the command text.
 */
async function gameFootball(msg, bot, collection, valueIndex) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const messageId = msg.message_id;

    const userDonateStatus = await donatedUsers(msg, collection);
    const user = await collection.findOne({ id: userId });
    const parts = text.split(' ');

    if (parts.length <= valueIndex) {
        const errorMessage = `
${userDonateStatus}, –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 
–ü—Ä–∏–º–µ—Ä: <code>—Ñ—É—Ç–±–æ–ª 10</code>
    `;
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    const balance = user.balance;
    const value = parseInt(parseNumber(parts[valueIndex].toLowerCase()));

    if (value <= 0 || isNaN(value)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    `, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (balance < value) {
        const errorMessage = '<b>–£ –≤–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤</b>';
        bot.sendMessage(chatId, errorMessage, { reply_to_message_id: messageId, parse_mode: 'HTML' });
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 20);

    let winCoefficient = 0;
    let resultText = '';
    let winValue;

    if (randomNum < 5) {
        winCoefficient = 2;
        resultText = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x';
        winValue = 5;
    } else {
        resultText = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x';
        winValue = 4;
    }

    const userStatus = await donatedUsers(msg, collection);
    const winAmount = value * winCoefficient;
    const newBalance = resultText.includes('–≤—ã–∏–≥—Ä–∞–ª–∏') ? balance + winAmount : balance - value;
    const againGameOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑', switch_inline_query_current_chat: '—Ñ—É—Ç–±–æ–ª ' }]
            ]
        }
    }

    const resultMessage = `
<b>${userStatus}</b>
<b>${resultText}</b>
<b>${winCoefficient === 2 ? winAmount.toLocaleString('de-DE') : `-${value.toLocaleString('de-DE')}`} ${winCoefficient > 0 ? gameWinStickers() : gameLoseStickers()}.</b>
  `;

    const opt = { emoji: '‚öΩÔ∏è', value: winValue };

    bot.sendDice(chatId, opt).then(async () => {
        await bot.sendMessage(chatId, resultMessage, { reply_to_message_id: messageId, parse_mode: 'HTML', ...againGameOptions });
    });

    const ratesUpdate = { $inc: { "rates.0.all": 1 } };

    if (winCoefficient > 0) {
        ratesUpdate.$inc["rates.0.wins"] = 1;
    } else {
        ratesUpdate.$inc["rates.0.loses"] = 1;
    }

    collection.updateOne({ id: userId }, { $set: { balance: newBalance }, ...ratesUpdate });
    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

async function gameRice(msg, bot, collection, valueIndex) {
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const text = msg.text

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userCar = user.properties[0].cars
    const userCarSt = user.properties[0].carStatus
    const userCarGas = user.properties[0].carGasoline
    const balance = user.balance

    const parts = text.split(' ')
    const summ = parseInt(parseNumber(parts[valueIndex]))

    const riceKb = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üïπ–°—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ', switch_inline_query_current_chat: '–≥–æ–Ω–∫–∞ 1–µ3' }]
            ]
        }
    }

    if (userCar === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É
<code>–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É 1</code> - –ø–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã 
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (isNaN(summ) || summ <= 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å—Ç–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...riceKb,
        })
        return;
    }

    if (summ > balance) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...riceKb,
        })
        return;
    }

    if (userCarGas <= 10) {
        const carGasKb = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üõ¢–ü–æ–π—Ç–∏ –≤ –∑–∞–ø—Ä–∞–≤–∫—É', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–ø—Ä–∞–≤–∏—Ç—å' }]
                ]
            }
        }
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã –ø–æ—á—Ç–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–Ω–∑–∏–Ω–∞ üõ¢
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...carGasKb,
        })
        return;
    }

    if (userCarSt <= 10) {
        const carStKb = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üõ†–ü–æ–π—Ç–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è' }]
                ]
            }
        }
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤–∞—à–∞ –º–∞—à–∏–Ω–∞ –ø–æ—á—Ç–∏ —Å–ª–æ–º–∞–Ω–∞ –Ω—É–∂–Ω–æ –ø–æ–π—Ç–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é üõ†
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...carStKb,
        })
        return;
    }

    if (isGameInProgress === false) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    isGameInProgress = false;
    const randomNum = Math.floor(Math.random() * 100);

    let resultText = `<i>–ñ–∞–ª—å</i> <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 0x</b> ${gameLoseStickers()}\n<b>-${summ}</b>`;
    let winValue = 0;

    if (randomNum < 35) {
        winValue = Math.floor(summ * 2);
        resultText = `<i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</i> <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2x ${gameWinStickers()}</b>\n<b>+${winValue}</b>`;
    }
    
    await collection.updateOne({ id: userId1 }, { $inc: { balance: -summ } })

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —Å—ã–≥—Ä–∞–ª–∏ –≥–æ–Ω–∫—É üèé

${resultText}
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
        ...riceKb,
    })
    await collection.updateOne({ id: userId1 }, { $inc: { balance: winValue, "properties.0.carStatus": -10, "properties.0.carGasoline": -10 } })

    setTimeout(() => {
        isGameInProgress = true;
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ (2 —Å–µ–∫—É–Ω–¥—ã)
}

async function gameRiceNeed(msg, bot, collection, valueIndex) {
    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userCar = user.properties[0].cars
    const userCarSt = user.properties[0].carStatus
    const userCarGas = user.properties[0].carGasoline
    const balance = user.balance

    const parts = text.split(' ')
    let carSetting = parts[valueIndex]

    const datamap = {
        '–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è': { item: 'carStatus', need: userCarSt, cost: 3, txt: '–ø–æ—à–ª–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é –∏ –ø–æ—á–∏–Ω–∏–ª–∏ –≤–∞—à—É –º–∞—à–∏–Ω—É üõ†', img: 'https://amastercar.ru/img/auto_service_new.jpg' },
        '–∑–∞–ø—Ä–∞–≤–∏—Ç—å': { item: 'carGasoline', need: userCarGas, cost: 2, txt: '–∑–∞–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à—É –º–∞—à–∏–Ω—É üõ¢', img: 'https://auto.24tv.ua/resources/photos/news/202006/21771a2f138da-a6a9-40a0-b446-f6830be35db7.jpg?1592310798000&fit=cover&w=720&h=405&q=65' },
    }

    const carSettingKb = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üõ†–ü–æ–π—Ç–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫—É—é', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è' }, { text: 'üõ¢–ü–æ–π—Ç–∏ –≤ –∑–∞–ø—Ä–∞–≤–∫—É', switch_inline_query_current_chat: '–∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–ø—Ä–∞–≤–∏—Ç—å' }]
            ]
        }
    }
    if (!carSetting || !(carSetting in datamap)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...carSettingKb,
        })
        return;
    }

    carSetting = parts[valueIndex].toLowerCase()

    if (carSetting in datamap) {
        if (userCar === '') {
            bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ
<code>–∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É 1</code> –∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        const { item, need, cost, txt, img } = datamap[carSetting]
        const riceKb = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üïπ–°—ã–≥—Ä–∞—Ç—å –≥–æ–Ω–∫—É', switch_inline_query_current_chat: '–≥–æ–Ω–∫–∞ 1–µ3' }]
                ]
            }
        }

        if (need > 10) {
            bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –µ—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ã–≥—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–Ω–æ–∫ üèé
<i>–ü–æ–∏–≥—Ä–∞–µ–º ?!</i>
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
                ...riceKb,
            })
            return;
        }

        const findNeed = Math.floor(100 - need)
        const valueCost = Math.floor(cost * findNeed)

        if (valueCost > balance) {
            bot.sendMessage(chatId, `
${userDonateStatus}, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ${valueCost.toLocaleString('de-DE')} –Ω—É–∂–Ω–æ –≤ –±–∞–ª–∞–Ω—Å
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        bot.sendPhoto(chatId, img, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            caption: `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ ${txt}
<i>–ó–∞ ¬ª</i> <b>${valueCost.toLocaleString('de-DE')} ${formatNumberInScientificNotation(valueCost)}</b>
            `
        })
        const updateObj = {}
        updateObj[`properties.0.${item}`] = findNeed

        await collection.updateOne({ id: userId1 }, { $inc: { balance: -valueCost } })
        await collection.updateOne({ id: userId1 }, { $inc: updateObj })
    }
}

module.exports = {
    kazino,
    gameSpin,
    gameBouling,
    gameFootball,
    gameRice,
    gameRiceNeed,
};
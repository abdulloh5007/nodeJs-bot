const { donatedUsers } = require("../donate/donatedUsers");

let bonusCooldown = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–æ–Ω—É—Å–∞ (–º–æ–Ω–µ—Ç—ã –∏–ª–∏ UC)
function getRandomBonusType() {
    return Math.random() < 0.5 ? '–º–æ–Ω–µ—Ç—ã' : 'UC';
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã
function getRandomAmount() {
    return Math.floor(Math.random() * (10000 - 10) + 10); // –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã –æ—Ç 10 –¥–æ 10000
}

function getRandomUc() {
    return Math.floor(Math.random() * (10 - 1) + 1); // –ü—Ä–∏–º–µ—Ä —Å—É–º–º—ã –æ—Ç 1 –¥–æ 10
}

async function handleDailyBonus(msg, collection, bot) {
    const userId = msg.from.id;
    const currentTime = Date.now();

    const user = await collection.findOne({ id: userId });

    const lastBonusTime = user.lastBonusTime || 0;
    const userStatusName = user.status[0].statusName
    // –ò–∑–º–µ–Ω—è–µ–º cooldown –¥–ª—è VIP –∏ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userStatusName === 'vip' || userStatusName === 'premium') {
        bonusCooldown = 12 * 60 * 60 * 1000; // 12 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    } else {
        bonusCooldown = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    }

    const userDonateStatus = await donatedUsers(msg, collection)

    if (currentTime - lastBonusTime >= bonusCooldown) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
        const bonusAmount = getRandomAmount();
        const bonusType = getRandomBonusType();
        const bonusUc = getRandomUc();

        if (bonusType === 'UC') {
            const donateX2 = bonusUc * 2

            if (userStatusName === 'vip') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await collection.updateOne({ id: userId }, { $set: { lastBonusTime: currentTime } });

                // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await collection.updateOne({ id: userId }, { $inc: { uc: donateX2 } });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
                const bonusMessage = `
${userDonateStatus}, –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:\n${bonusUc} UC.
<b>${userStatusName.toUpperCase()} üíé</b> 2X = ${donateX2} UC.
                `;
                bot.sendMessage(msg.message.chat.id, bonusMessage, { reply_to_message_id: msg.message.message_id, parse_mode: 'HTML' });
            }
            else if (userStatusName === 'premium') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await collection.updateOne({ id: userId }, { $set: { lastBonusTime: currentTime } });

                // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await collection.updateOne({ id: userId }, { $inc: { uc: donateX2 } });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
                const bonusMessage = `
${userDonateStatus}, –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:\n${bonusUc} UC.
<b>${userStatusName.toUpperCase()} ‚≠êÔ∏è</b> 2X = ${donateX2} UC.
                `;
                bot.answerCallbackQuery(msg.id, { show_alert: false, text: '—É—Å–ø–µ—Ö' })
                bot.sendMessage(msg.message.chat.id, bonusMessage, { reply_to_message_id: msg.message.message_id, parse_mode: 'HTML' });
            }
            else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await collection.updateOne({ id: userId }, { $set: { lastBonusTime: currentTime } });

                // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await collection.updateOne({ id: userId }, { $inc: { uc: bonusUc } });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
                const bonusMessage = `
${userDonateStatus}, –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:\n${bonusUc} UC.
                `;
                bot.sendMessage(msg.message.chat.id, bonusMessage, { reply_to_message_id: msg.message.message_id, parse_mode: 'HTML' });
            }
        }
        if (bonusType === '–º–æ–Ω–µ—Ç—ã') {
            const donateX2 = bonusAmount * 2
            if (userStatusName === 'vip') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await collection.updateOne({ id: userId }, { $set: { lastBonusTime: currentTime } });

                // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await collection.updateOne({ id: userId }, { $inc: { balance: donateX2 } });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
                const bonusMessage = `
${userDonateStatus}, –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:\n${bonusAmount.toLocaleString('de-DE')} $.
<b>${userStatusName.toUpperCase()} üíé</b> 2X = ${donateX2.toLocaleString('de-DE')} $.
                `;
                bot.sendMessage(msg.message.chat.id, bonusMessage, { reply_to_message_id: msg.message.message_id, parse_mode: 'HTML' });
            }
            else if (userStatusName === 'premium') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await collection.updateOne({ id: userId }, { $set: { lastBonusTime: currentTime } });

                // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await collection.updateOne({ id: userId }, { $inc: { balance: donateX2 } });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
                const bonusMessage = `
${userDonateStatus}, –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:\n${bonusAmount.toLocaleString('de-DE')} $.
<b>${userStatusName.toUpperCase()} ‚≠êÔ∏è</b> 2X = ${donateX2.toLocaleString('de-DE')} $.
                `;
                bot.sendMessage(msg.message.chat.id, bonusMessage, { reply_to_message_id: msg.message.message_id, parse_mode: 'HTML' });
            }
            else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await collection.updateOne({ id: userId }, { $set: { lastBonusTime: currentTime } });

                // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await collection.updateOne({ id: userId }, { $inc: { balance: bonusAmount } });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
                const bonusMessage = `
${userDonateStatus}, –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:\n${bonusAmount.toLocaleString('de-DE')} $.
                `;
                bot.sendMessage(msg.message.chat.id, bonusMessage, { reply_to_message_id: msg.message.message_id, parse_mode: 'HTML' });
            }
        }
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
        const remainingTime = formatRemainingTime(bonusCooldown - (currentTime - lastBonusTime));
        const errorMessage = `
${userDonateStatus}, –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${remainingTime}.
        `;
        bot.sendMessage(msg.message.chat.id, errorMessage, { reply_to_message_id: msg.message.message_id, parse_mode: 'HTML' });
    }
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
function formatRemainingTime(remainingTime) {
    const hours = Math.floor(remainingTime / (60 * 60 * 1000));
    const minutes = Math.floor((remainingTime % (60 * 60 * 1000)) / (60 * 1000));
    const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);

    return `${hours} —á ${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`;
}

module.exports = {
    handleDailyBonus,
    formatRemainingTime,
};

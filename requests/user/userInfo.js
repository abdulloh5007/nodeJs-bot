const { donatedUsers } = require("../donate/donatedUsers");
const { formatNumberWithAbbreviations, formatNumberInScientificNotation } = require("../systems/systemRu");
const { handleDailyBonus } = require("./bonusCollectBtn");
require('dotenv').config();
const adminIdInt = parseInt(process.env.ADMIN_ID_INT)

async function userChangeBFunc() {

}

async function userBalance(msg, collection, bot) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const user = await collection.findOne({ id: userId });

    if (['–±', '–±–∞–ª–∞–Ω—Å', '—Å—á—ë—Ç', 'b', 'balance', 'balanc', 'balans'].includes(text.toLowerCase())) {
        const balance = user.balance;
        const balanceFuncE = formatNumberInScientificNotation(balance);
        const balanceFuncT = balance.toLocaleString('de-DE');
        const userUc = user.uc;
        const userStatusName = user.status[0].statusName;

        const userDonateStatus = await donatedUsers(msg, collection);

        // bot.getUserProfilePhotos(userId, { limit: 1 })
        //     .then((result) => {
        //         if (result.total_count > 0) {
        //             const photo = result.photos[0][0].file_id; // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
        //             console.log(photo);
        //             // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ —á–∞—Ç
        //             bot.sendPhoto(chatId, photo)
        //                 .then(() => {
        //                     console.log('–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
        //                 })
        //                 .catch((error) => {
        //                     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        //                 });
        //         } else {
        //             console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.');
        //         }
        //     })
        //     .catch((error) => {
        //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        //     });

        let userStatus;
        if (userStatusName === 'standart' || userStatusName === 'player') {
            userStatus = `
${userDonateStatus}, –≤–∞—à –±–∞–ª–∞–Ω—Å

ü™ô | –ú–æ–Ω–µ—Ç: ${balanceFuncT} ${balanceFuncE}
UC | ${userUc}

<b>–†–ï–ö–õ–ê–ú–ê: –°–∫–æ—Ä–æ</b>
            `;
        } else {
            userStatus = `
${userDonateStatus}, –≤–∞—à –±–∞–ª–∞–Ω—Å

ü™ô | –ú–æ–Ω–µ—Ç: ${balanceFuncT} ${balanceFuncE}
UC | ${userUc}
            `;
        }

        const txt = `
${userStatus}
        `;

        const dayBonusOption = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', callback_data: `dayBonusCollect_${userId}` }]
                ]
            }
        };
        bot.sendMessage(chatId, txt, { reply_to_message_id: msg.message_id, ...dayBonusOption, parse_mode: 'HTML' });
    }
}

async function dayBonusCollectingBtn(msg, collection, bot) {
    const userId = msg.from.id
    const data = msg.data
    const msgId = msg.id

    const [bonus, userIdClick] = data.split('_')

    if (bonus === 'dayBonusCollect') {
        if (userId == userIdClick) {
            // bot.answerCallbackQuery(msgId, { text: "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! –ø–æ–∫–∞ —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert: true });
            // bot.sendMessage(chatId, `–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`, { reply_to_message_id: messageId })
            handleDailyBonus(msg, collection, bot)
        }
        else {
            bot.answerCallbackQuery(msgId, { show_alert: true, text: '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è' })
        }
    }
}

async function userEditGameId(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const match = text && text.match(/—Å–º–µ–Ω–∏—Ç—å –∞–π–¥–∏\s+(\S+)/i);

    if (match && match[1]) {
        const newId = match[1].toUpperCase();
        if (newId.length === 8) {
            if (userId === adminIdInt) {
                await bot.sendMessage(chatId, `–í—ã —Å–º–µ–Ω–∏–ª–∏ –∞–π–¥–∏ –Ω–∞ "${newId}"`, { reply_to_message_id: msg.message_id });
                collection.updateOne({ id: userId }, { $set: { gameId: newId } });
            } else {
                await bot.sendMessage(chatId, `–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∞–π–¥–∏. –ù–∞–ø–∏—à–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ.`, { reply_to_message_id: msg.message_id });
            }
        } else {
            await bot.sendMessage(chatId, `–î–ª–∏–Ω–∞ –∞–π–¥–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 8 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ B7777777</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
        }
    }
    if (text === '—Å–º–µ–Ω–∏—Ç—å –∞–π–¥–∏') {
        await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏ –º–Ω–µ –∞–π–¥–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ B7777777</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
    }
}

async function userEditGameName(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const match = text && text.match(/—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫\s+(\S+)/i);

    const prohibitedStickers = ["üéÅ", "üíé", "‚≠êÔ∏è"]; // –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
    const user = await collection.findOne({ id: userId });
    if (match && match[1]) {
        const newName = match[1];
        const userStatus = user.status[0].statusName

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userStatus === "premium" || userStatus === "vip") {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –Ω–æ–≤–æ–º –Ω–∏–∫–Ω–µ–π–º–µ
            const containsProhibitedSticker = prohibitedStickers.some(sticker => newName.includes(sticker));

            if (newName.length <= 16 && !containsProhibitedSticker) {
                await bot.sendMessage(chatId, `–í—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –Ω–∞ "${newName}"`, { reply_to_message_id: msg.message_id });
                collection.updateOne({ id: userId }, { $set: { userName: newName } });
                collection.updateOne({ id: userId }, { $set: { "bankCard.0.cardOwner": newName } });
            } else {
                let errorMessage = "–î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 –∑–Ω–∞–∫–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã:\n";

                if (newName.length > 16) {
                    errorMessage += "–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.\n";
                }

                await bot.sendMessage(chatId, errorMessage, { reply_to_message_id: msg.message_id });
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –Ω–æ–≤–æ–º –Ω–∏–∫–Ω–µ–π–º–µ
            const containsProhibitedSticker = prohibitedStickers.some(sticker => newName.includes(sticker));

            if (newName.length <= 9 && !containsProhibitedSticker) {
                await bot.sendMessage(chatId, `–í—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –Ω–∞ "${newName}"`, { reply_to_message_id: msg.message_id });
                collection.updateOne({ id: userId }, { $set: { userName: newName } });
                collection.updateOne({ id: userId }, { $set: { "bankCard.0.cardOwner": newName } });
            } else {
                let errorMessage = "–î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 9 –∑–Ω–∞–∫–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã:\n";

                if (newName.length > 9) {
                    errorMessage += "–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.\n";
                }

                if (containsProhibitedSticker) {
                    errorMessage += "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã üéÅ, üíé –∏–ª–∏ ‚≠êÔ∏è –≤ –Ω–∏–∫–Ω–µ–π–º–µ.";
                }

                await bot.sendMessage(chatId, errorMessage, { reply_to_message_id: msg.message_id });
            }
        }
    }

    if (text === '—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫') {
        await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 14 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ (—è –≤–ª–∞–¥–µ–ª–µ—Ü)</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
    }
}

async function userGameInfo(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const user = await collection.findOne({ id: userId });

    if (['–∏–Ω—Ñ–æ', '–ø—Ä–æ—Ñ–∏–ª—å'].includes(text.toLowerCase())) {
        const userGameId = user.gameId;
        const register_time = user.registerTime;
        const userGameBalance = user.balance;
        const ratesAll = user.rates.map(e => e.all);
        const ratesWin = user.rates.map(e => e.wins);
        const ratesLose = user.rates.map(e => e.loses);
        const userBankCard = user.bankCard[0].cardNumber;
        const cryptoCurAlt = user.crypto[0].altcoinidx;
        const userUc = user.uc;
        const userStatus = user.status[0].statusName;

        const balanceFuncE = formatNumberInScientificNotation(userGameBalance);
        const balanceFuncT = userGameBalance.toLocaleString('de-DE');
        const userDonateStatus = await donatedUsers(msg, collection);

        const cardText = chatId === userId ? `–ö–∞—Ä—Ç–∞ üí≥: |<code>${userBankCard}</code>|` : `–ö–∞—Ä—Ç–∞ üí≥: |<code>5444 **** **** ****</code>|`;

        await bot.sendMessage(chatId, `
<b>–ò–≥—Ä–æ–≤–æ–π üÜî:</b> ${userGameId}
<b>–ù–∏–∫ üë®:</b> ${userDonateStatus}
<b>–ë–∞–ª–∞–Ω—Å üí∏:</b> ${balanceFuncT}$ ${balanceFuncE}
<b>Uc: ${userUc}</b>
<b>Status: ${userStatus.toUpperCase()}</b>
${cardText}
<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã üìä‚Üì</b>
   <b>Alt Coin IDX:</b> ${cryptoCurAlt}

<b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ${ratesAll} \n    –í—ã–∏–≥—Ä—ã—à–∏: ${ratesWin} \n    –ü—Ä–æ–∏–≥—Ä—ã—à–∏: ${ratesLose}</b>
<b>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìÜ:</b> ${register_time}
    `, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
    }
}

async function myId(msg, bot, collection) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const user = await collection.findOne({ id: userId })

    const userDonateStatus = await donatedUsers(msg, collection)

    if (['–∞–π–¥–∏', '–º–æ–π –∞–π–¥–∏', 'my id', 'myid', 'id'].includes(text.toLowerCase())) {
        const userBotid = user.id
        const userGameId = user.gameId

        bot.sendMessage(chatId, `
${userDonateStatus}, –í–æ—Ç –≤–∞—à 
<b>–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏:</b> <code>${userBotid}</code>
<b>–ë–æ—Ç –∞–π–¥–∏:</b> <code>${userGameId}</code>
        `, { parse_mode: 'HTML', reply_to_message_id: messageId })
    }
}

module.exports = {
    userBalance,
    userEditGameId,
    userGameInfo,
    userEditGameName,
    myId,
    dayBonusCollectingBtn,
};

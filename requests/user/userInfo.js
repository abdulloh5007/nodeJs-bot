const { dayBonusOption } = require("../../options");

async function userBalance(msg, collection, bot) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;
    const user = await collection.findOne({ id: userId });

    if (['–±', '–±–∞–ª–∞–Ω—Å', '—Å—á—ë—Ç'].includes(text.toLowerCase())) {
        const balance = user.balance;
        const name = user.userName;
        await bot.sendMessage(chatId, `
–∏–≥—Ä–æ–∫ ${name}
–≤–æ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å ${balance}
                `, { parse_mode: 'HTML', ...dayBonusOption, reply_to_message_id: msg.message_id });
    }
}

async function userEditGameId(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const match = text && text.match(/—Å–º–µ–Ω–∏—Ç—å –∞–π–¥–∏\s+(\S+)/i);
    const user = collection.findOne({ id: userId });

    if (match && match[1]) {
        const newId = match[1].toUpperCase();
        if (newId.length === 8) {
            if (userId === adminId) {
                await bot.sendMessage(chatId, `–í—ã —Å–º–µ–Ω–∏–ª–∏ –∞–π–¥–∏ –Ω–∞ "${newId}"`, { reply_to_message_id: msg.message_id });
                collection.updateOne({ id: userId }, { $set: { gameId: newId } });
            } else {
                await bot.sendMessage(chatId, `–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∞–π–¥–∏. –ù–∞–ø–∏—à–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ.`, { reply_to_message_id: msg.message_id });
            }
        } else {
            await bot.sendMessage(chatId, `–î–ª–∏–Ω–∞ –∞–π–¥–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 8 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ B7777777</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
        }
    }
    if (text === '—Å–º–µ–Ω–∏—Ç—å –∞–π–¥–∏') {
        await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏ –º–Ω–µ –∞–π–¥–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ B7777777</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
    }
}

async function userEditGameName(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const match = text && text.match(/—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫\s+(\S+)/i);

    if (match && match[1]) {
        const newName = match[1];
        if (newName.length <= 14) {
            await bot.sendMessage(chatId, `–í—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –Ω–∞ "${newName}"`, { reply_to_message_id: msg.message_id });
            collection.updateOne({ id: userId }, { $set: { userName: newName } });
            collection.updateOne({ id: userId }, { $set: { "bankCard.0.cardOwner": newName } })
        } else {
            await bot.sendMessage(chatId, `–î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 14 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ B7777777</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
        }
    }
    if (text === '—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫') {
        await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–≤—ã–π –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 14 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ (—è –≤–ª–∞–¥–µ–ª–µ—Ü)</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
    }
}

async function userGameInfo(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const user = await collection.findOne({ id: userId });

    if (['–∏–Ω—Ñ–æ', '–ø—Ä–æ—Ñ–∏–ª—å'].includes(text.toLowerCase())) {
        const altCoinIdx = 107.7;
        const userGameId = user.gameId;
        const userGameName = user.userName;
        const register_time = user.registerTime;
        const userGameBalance = user.balance;
        const ratesAll = user.rates.map((e) => e.all);
        const ratesWin = user.rates.map((e) => e.wins);
        const ratesLose = user.rates.map((e) => e.loses);

        await bot.sendMessage(chatId, `
<b>–ò–≥—Ä–æ–≤–æ–π üÜî:</b> ${userGameId}
<b>–ù–∏–∫ üë®:</b> <a href='tg://user?id=${userId}'>${userGameName}</a>
<b>–ë–∞–ª–∞–Ω—Å üí∏: ${userGameBalance}$</b>

<b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ${ratesAll} \n    –í—ã–∏–≥—Ä—ã—à–∏: ${ratesWin} \n    –ü—Ä–æ–∏–≥—Ä—ã—à–∏: ${ratesLose}</b>
<b>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìÜ:</b> ${register_time}
            `, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
    }
}

async function myId(msg, bot, collection) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const user = await collection.findOne({ id: userId })

    if (['–∞–π–¥–∏', '–º–æ–π –∞–π–¥–∏', 'my id', 'myid', 'id'].includes(text.toLowerCase())) {
        const userBotid = user.id
        const userName = user.userName

        bot.sendMessage(chatId, `–∏–≥—Ä–æ–∫ <a href='tg://user?id=${userBotid}'>${userName}</a> –í–æ—Ç –≤–∞—à <b>–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏:</b> <code>${userBotid}</code>`, { parse_mode: 'HTML', reply_to_message_id: messageId })
    }
}

module.exports = {
    userBalance,
    userEditGameId,
    userGameInfo,
    userEditGameName,
    myId,
};

const { donatedUsers } = require("../donate/donatedUsers");
const { formatNumberWithAbbreviations, formatNumberInScientificNotation } = require("../systems/systemRu");
const { handleDailyBonus } = require("./bonusCollectBtn");
require('dotenv').config();
const adminIdInt = parseInt(process.env.ADMIN_ID_INT)

async function userChangeBFunc() {
    // bot.getUserProfilePhotos(userId, { limit: 1 })
    //     .then((result) => {
    //         if (result.total_count > 0) {
    //             const photo = result.photos[0][0].file_id; // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
    //             console.log(photo);
    //             // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ —á–∞—Ç
    //             bot.sendPhoto(chatId, photo)
    //                 .then(() => {
    //                     console.log('–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
    //                 })
    //                 .catch((error) => {
    //                     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
    //                 });
    //         } else {
    //             console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.');
    //         }
    //     })
    //     .catch((error) => {
    //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    //     });
}

async function userBalance(msg, collection, bot, collectionAddvert) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = await collection.findOne({ id: userId });
    const addvert = await collectionAddvert.findOne({}, { sort: { addvertTime: -1 } });

    const balance = user.balance;
    const balanceFuncT = balance.toLocaleString('de-DE');
    const userUc = user.uc;
    const userStatusName = user.status[0].statusName;

    const userDonateStatus = await donatedUsers(msg, collection);

    const addvertText = addvert ? addvert.addvertText : '–ù–ï–¢–£';
    const addvertTime = addvert ? addvert.addvertTime : '';
    const convertedTime = new Date(addvertTime);
    const userAva = user.avatar[0].avaUrl;
    const depBalance = user.depozit[0].balance;

    const txtBalance = `
<b>‚îåüíµ | –î–µ–Ω–µ–≥:</b> <i>${balanceFuncT}$</i>
<b>‚îúUC | –î–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç–∞:</b> <b><i>${userUc}</i></b>
<b>‚îîüè¶ | –í –¥–µ–ø–æ–∑–∏—Ç–µ:</b> <i>${depBalance.toLocaleString('de-DE')}$</i>
    `;

    let userStatus;
    if (userStatusName === 'standart' || userStatusName === 'player') {
        userStatus = `
${userDonateStatus}, –≤–∞—à –±–∞–ª–∞–Ω—Å
${txtBalance}
<b>–†–ï–ö–õ–ê–ú–ê:</b> ${addvertText}
${addvertTime != '' ? `<b>–î–ê–¢–ê:</b> ${convertedTime.toLocaleDateString()}` : ''}
            `;
    } else {
        userStatus = `
${userDonateStatus}, –≤–∞—à –±–∞–ª–∞–Ω—Å
${txtBalance}
        `;
    }

    const txt = `
${userStatus}
        `;

    const dayBonusOption = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å üéÅ', callback_data: `dayBonusCollect_${userId}` }]
            ]
        }
    };

    if (userAva === '') {
        await bot.sendMessage(chatId, txt, { reply_to_message_id: msg.message_id, ...dayBonusOption, parse_mode: 'HTML', disable_web_page_preview: true });
    } else {
        await bot.sendPhoto(chatId, userAva, {
            reply_to_message_id: msg.message_id,
            ...dayBonusOption,
            parse_mode: 'HTML',
            caption: txt,
            disable_web_page_preview: true,
        });
    }
}

async function dayBonusCollectingBtn(msg, collection, bot) {
    const userId = msg.from.id
    const data = msg.data
    const msgId = msg.id

    const [bonus, userIdClick] = data.split('_')

    if (bonus === 'dayBonusCollect') {
        if (userId == userIdClick) {
            // bot.answerCallbackQuery(msgId, { text: "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! –ø–æ–∫–∞ —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert: true });
            // bot.sendMessage(chatId, `–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`, { reply_to_message_id: messageId })
            handleDailyBonus(msg, collection, bot)
        }
        else {
            bot.answerCallbackQuery(msgId, { show_alert: true, text: '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è' })
        }
    }
}

async function userEditGameId(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    const parts = text.split(' ')
    const userDonateStatus = await donatedUsers(msg, collection)

    if (text === '—Å–º–µ–Ω–∏—Ç—å –∞–π–¥–∏') {
        await bot.sendMessage(chatId, `
${userDonateStatus}, –ù–∞–ø–∏—à–∏ –º–Ω–µ –∞–π–¥–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 –∑–Ω–∞–∫–æ–≤.
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ B7777777</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
        return;
    }

    const newId = parts[2].toUpperCase();
    if (newId.length === 8) {
        if (userId === adminIdInt) {
            await bot.sendMessage(chatId, `
${userDonateStatus}, –í—ã —Å–º–µ–Ω–∏–ª–∏ –∞–π–¥–∏ –Ω–∞ <u>${newId}</u>`, { reply_to_message_id: msg.message_id });
            collection.updateOne({ id: userId }, { $set: { gameId: newId } });
        } else {
            await bot.sendMessage(chatId, `
${userDonateStatus}, –¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –∞–π–¥–∏. –ù–∞–ø–∏—à–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ.`, { reply_to_message_id: msg.message_id });
        }
    } else {
        await bot.sendMessage(chatId, `
${userDonateStatus}, –î–ª–∏–Ω–∞ –∞–π–¥–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 8 –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ B7777777</code>`, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
    }
}

async function userEditGameName(msg, bot, collection) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const parts = text.split(' ')
    const userDonateStatus = await donatedUsers(msg, collection)
    let test = false

    if (text === '—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫') {
        await bot.sendMessage(chatId, `
${userDonateStatus}, –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${test === true ? '14' : '9'} –∑–Ω–∞–∫–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ (—è –≤–ª–∞–¥–µ–ª–µ—Ü)</code>`, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    const prohibitedStickers = ["üéÅ", "üíé", "‚≠êÔ∏è"]; // –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
    const user = await collection.findOne({ id: userId });
    const newName = text.slice(12);
    const userStatus = user.status[0].statusName

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userStatus === "premium" || userStatus === "vip") {
        test = true
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –Ω–æ–≤–æ–º –Ω–∏–∫–Ω–µ–π–º–µ
        const containsProhibitedSticker = prohibitedStickers.some(sticker => newName.includes(sticker));

        if (newName.length <= 16 && !containsProhibitedSticker) {
            await bot.sendMessage(chatId, `
${userDonateStatus}, –í—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –Ω–∞ <u>${newName}</u>`, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            });
            collection.updateOne({ id: userId }, { $set: { userName: newName } });
            collection.updateOne({ id: userId }, { $set: { "bankCard.0.cardOwner": newName } });
        } else {
            let errorMessage = `
${userDonateStatus}, –î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 –∑–Ω–∞–∫–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã:`;

            if (newName.length > 16) {
                errorMessage += `${userDonateStatus}, –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.\n`;
            }

            await bot.sendMessage(chatId, errorMessage, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            });
        }
    } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –Ω–æ–≤–æ–º –Ω–∏–∫–Ω–µ–π–º–µ
        const containsProhibitedSticker = prohibitedStickers.some(sticker => newName.includes(sticker));

        if (newName.length <= 9 && !containsProhibitedSticker) {
            await bot.sendMessage(chatId, `
${userDonateStatus}, –í—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –Ω–∞ <u>${newName}</u>`, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            });
            collection.updateOne({ id: userId }, { $set: { userName: newName } });
            collection.updateOne({ id: userId }, { $set: { "bankCard.0.cardOwner": newName } });
        } else {
            let errorMessage = `
${userDonateStatus}, –î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 9 –∑–Ω–∞–∫–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã:`;

            if (newName.length > 9) {
                errorMessage += `${userDonateStatus}, –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.`;
            }

            if (containsProhibitedSticker) {
                errorMessage += `–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã üéÅ, üíé –∏–ª–∏ ‚≠êÔ∏è –≤ –Ω–∏–∫–Ω–µ–π–º–µ.`;
            }

            await bot.sendMessage(chatId, errorMessage, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            });
        }
    }
}

async function userGameInfo(msg, bot, collection) {
    const text = msg.text;
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const user = await collection.findOne({ id: userId });

    const userGameId = user.gameId;
    const register_time = user.registerTime;
    const userGameBalance = user.balance;
    const ratesAll = user.rates.map(e => e.all);
    const ratesWin = user.rates.map(e => e.wins);
    const ratesLose = user.rates.map(e => e.loses);
    const userBankCard = user.bankCard[0].cardNumber;
    const cryptoCurAlt = user.crypto[0].altcoinidx;
    const userUc = user.uc;
    const userStatus = user.status[0].statusName;

    const balanceFuncE = formatNumberInScientificNotation(userGameBalance);
    const balanceFuncT = userGameBalance.toLocaleString('de-DE');
    const userDonateStatus = await donatedUsers(msg, collection);
    const userHouse = user.properties[0].houses
    const userCar = user.properties[0].cars

    const propHouse = userHouse !== '' ? userHouse : '–æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç'
    const propCar = userCar !== '' ? userCar : '–æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç'

    const cardText = chatId === userId ? `–ö–∞—Ä—Ç–∞ üí≥: |<code>${userBankCard}</code>|` : `–ö–∞—Ä—Ç–∞ üí≥: |<code>5444 **** **** ****</code>|`;

    await bot.sendMessage(chatId, `
<b>–ò–≥—Ä–æ–≤–æ–π üÜî:</b> ${userGameId}
<b>–ù–∏–∫ üë®:</b> ${userDonateStatus}
<b>–ë–∞–ª–∞–Ω—Å üí∏:</b> ${balanceFuncT}$ ${balanceFuncE}
<b>Uc: ${userUc}</b>
<b>Status: ${userStatus.toUpperCase()}</b>
${cardText}

<b>–ò–º—É—â–µ—Å—Ç–≤–∞ ‚Üì:</b>
   <b>–î–æ–º -</b> <u>${propHouse}</u>
   <b>–ú–∞—à–∏–Ω–∞ -</b> <u>${propCar}</u>

<b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ${ratesAll} \n    –í—ã–∏–≥—Ä—ã—à–∏: ${ratesWin} \n    –ü—Ä–æ–∏–≥—Ä—ã—à–∏: ${ratesLose}</b>
<b>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìÜ:</b> ${register_time}
    `, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
}

async function myId(msg, bot, collection) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const user = await collection.findOne({ id: userId })

    const userDonateStatus = await donatedUsers(msg, collection)

    const userBotid = user.id
    const userGameId = user.gameId

    bot.sendMessage(chatId, `
${userDonateStatus}, –í–æ—Ç –≤–∞—à 
<b>–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏:</b> <code>${userBotid}</code>
<b>–ë–æ—Ç –∞–π–¥–∏:</b> <code>${userGameId}</code>
    `, { parse_mode: 'HTML', reply_to_message_id: messageId })
}

module.exports = {
    userBalance,
    userEditGameId,
    userGameInfo,
    userEditGameName,
    myId,
    dayBonusCollectingBtn,
};

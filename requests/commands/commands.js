const { startOptions, helpOption, backOption } = require("../../options")
require('dotenv').config();
const adminId = parseInt(process.env.ADMIN_ID)

const date = new Date()
const year = date.getFullYear()
const month = date.getMonth()
const day = date.getDate()
const hours = date.getHours()
const minutes = date.getMinutes()
const registerUserTime = `${day}-${month}-${year} ${hours}:${minutes}`

function generateRandomElementsOnlyUsers(letters, numbers) {
    const alphabet = letters;
    const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];

    let randomNumberString = '';
    for (let i = 0; i < numbers; i++) {
        randomNumberString += Math.floor(Math.random() * 10);
    }

    return randomLetter + randomNumberString;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
const onlyUsersId = generateRandomElementsOnlyUsers('BFNPRS', 7);


async function commandStart(msg, collection, bot) {
    const chatId = msg.chat.id
    const userId = msg.from.id
    const userName = msg.from.username
    const user = await collection.findOne({ id: userId })

    if (user) {
        const user = await collection.findOne({ id: userId })
        const register_time = user.registerTime

        await bot.sendMessage(chatId, `
–ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id=${userId}'>${userName}</a> \n
<b>–¢—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É</b>
<i>–î–∞—Ç–∞ ${register_time}</i>
            `, { parse_mode: 'HTML', ...startOptions, reply_to_message_id: msg.message_id })
    }
    else {
        // –ï–°–õ–ò –í–°–Å –¢–ê–ö–ò –•–û–ß–ï–®–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –°–¢–ò–ö–ï–†
        await bot.sendSticker(chatId, 'CAACAgIAAxkBAAEJuehkthTWSWEaOSTzdOjdX5T1rpuFEgACSQADQbVWDGATQ6Y8j8OALwQ')
            .then(() => {
                bot.sendMessage(chatId, `
–ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id=${userId}'>${userName}</a> \n
–Ø-–∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã.\n
–¢–µ–±–µ –≤—ã–¥–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ üéÅ –≤ —Ä–∞–∑–º–µ—Ä–µ 10.000‚Ç¨.\n
–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –±–µ—Å–µ–¥—É –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏.\n
–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–æ–º–æ—â—å "–ü–æ–º–æ—â—å" |

+–í–∞–º –≤ –ø–æ–¥–∞—Ä–æ–∫ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø–ª—Å—Ç–∏–∫ –∫–∞—Ä—Ç–∞ MasterCard
–ù–∞–ø–∏—à–∏—Ç–µ <code>–∫–∞—Ä—Ç–∞ –∏–Ω—Ñ–æ</code> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
        `, { parse_mode: 'HTML', ...startOptions, reply_to_message_id: msg.message_id })
            })
        const prefix = "5444";
        let cardNumber = prefix;
        for (let i = 0; i < 12; i++) {
            if (i % 4 === 0) {
                cardNumber += " ";
            }
            cardNumber += Math.floor(Math.random() * 10).toString();
        }

        collection.insertOne({
            id: userId,
            gameId: onlyUsersId,
            userName: userName,
            balance: 1000,
            registerTime: registerUserTime,
            altcoinidx: 0,
            crypto: [{
                altcoinidx: 0
            }],
            rates: [{
                wins: 0,
                loses: 0,
                all: 0
            }],
            userViolationsMute: [{
                mute: false,
                muteTime: "",
                cause: "",
            }],
            bankCard: [{
                cardHave: true,
                cardNumber: cardNumber,
                cardName: "mastercard",
                cardOwner: userName,
                cardValue: 0,
                cardPassword: 0,
                cardOwnerId: userId
            }]
        })

    }

    // –ï–°–õ–ò –•–û–ß–ï–®–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –§–û–¢–û –í–ú–ï–°–¢–û –°–¢–ò–ö–ï–†–ê

    //         bot.sendPhoto(chatId, '–£–†–õ –û–¢ –§–û–¢–û', { caption: `
    // –ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id=${userId}'>${userName}</a> \n
    // –Ø-–∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã.\n
    // –¢–µ–±–µ –≤—ã–¥–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ üéÅ –≤ —Ä–∞–∑–º–µ—Ä–µ 10.000‚Ç¨.\n
    // –¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –±–µ—Å–µ–¥—É –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏.\n
    // –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–æ–º–æ—â—å "–ü–æ–º–æ—â—å" |
    //         `, parse_mode: 'HTML', ...startOptions })

}

async function commandHelpInChats(msg, userGameName, bot) {
    const chatId = msg.chat.id
    const userId = msg.from.id
    const replyId = msg.message_id

    await bot.sendMessage(chatId, `
<a href='tg://user?id=${userId}'>${userGameName}</a>
üóÇ–†–∞–∑–¥–µ–ª—ã
üë®‚Äçüî¨Ownner: @levou7 

üëú –û—Å–Ω–æ–≤–Ω—ã–µ‚úá 
üåá¬†–ò–º—É—â–µ—Å—Ç–≤–æ‚ùÉ€¨
üõ° –î–ª—è ‚úÑ–ê–¥–º–∏–Ω–æ–≤
ü§π‚Äç‚ôÇ –ò–≥—Ä—ã‚ú∫
‚òéÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è„ã°
üìì –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ‚ùí

üóÑ –ë–µ—Å–µ–¥–∞ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª –±–æ—Ç–∞.
        `, { parse_mode: 'HTML', ...helpOption, reply_to_message_id: replyId })
}

async function commandHelp(msg, collection, bot) {
    const chatId = msg.chat.id
    const userId = msg.from.id
    const text = msg.text
    const user = await collection.findOne({ id: userId })
    const replyId = msg.message_id

    if (text && text.toLowerCase() === '/help' || text && text.toLowerCase() === '–ø–æ–º–æ—â—å') {
        const userGameName = user.userName
        await bot.sendMessage(chatId, `
<a href='tg://user?id=${userId}'>${userGameName}</a>
üóÇ–†–∞–∑–¥–µ–ª—ã
üë®‚Äçüî¨Ownner: @levou7 

üëú –û—Å–Ω–æ–≤–Ω—ã–µ‚úá 
üåá¬†–ò–º—É—â–µ—Å—Ç–≤–æ‚ùÉ€¨
üõ° –î–ª—è ‚úÑ–ê–¥–º–∏–Ω–æ–≤
ü§π‚Äç‚ôÇ –ò–≥—Ä—ã‚ú∫
‚òéÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è„ã°
üìì –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ‚ùí

üóÑ –ë–µ—Å–µ–¥–∞ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª –±–æ—Ç–∞.
`, { parse_mode: 'HTML', ...helpOption, reply_to_message_id: replyId })
    }
}

async function commandHelpAsBtn(msg, bot, userGameName) {
    const data = msg.data
    const chatId = msg.message.chat.id
    const userId = msg.message.from.id
    const replyId = msg.message_id

    const help = `
<a href='tg://user?id=${userId}'>${userGameName}</a>
üóÇ–†–∞–∑–¥–µ–ª—ã
üë®‚Äçüî¨Ownner: @levou7 

üëú –û—Å–Ω–æ–≤–Ω—ã–µ‚úá 
üåá –ò–º—É—â–µ—Å—Ç–≤–æ‚ùÉ€¨
üõ° –î–ª—è ‚úÑ–ê–¥–º–∏–Ω–æ–≤
ü§π‚Äç‚ôÇ –ò–≥—Ä—ã‚ú∫
‚òéÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è„ã°
üìì –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ‚ùí

üóÑ –ë–µ—Å–µ–¥–∞ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª –±–æ—Ç–∞.
    `
    // –≠–¢–û –§–£–ù–ö–¶–ò–Ø –í–´–ó–´–í–ê–ï–¢ –ö–ù–û–ü–ö–£ –ù–ê–ó–ê–î
    const willEditMessage = () => {
        bot.editMessageText(help, { parse_mode: 'HTML', chat_id: chatId, message_id: msg.message.message_id, ...helpOption, reply_to_message_id: replyId })
    }
    // –≠–¢–û –§–£–ù–ö–¶–ò–Ø –í–´–ó–´–í–ê–ï–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
    const willChangHelpOption = (funcData, funcText) => {
        if (data === funcData) {
            const text = funcText
            bot.editMessageText(text, { parse_mode: 'HTML', chat_id: chatId, message_id: msg.message.message_id, ...backOption, reply_to_message_id: replyId })
        }
    }

    if (data === 'help') {
        await bot.sendMessage(chatId, help, { parse_mode: 'HTML', ...helpOption, reply_to_message_id: replyId })
    }

    const restHelp = `
–ò–≥—Ä–æ–∫ <a href='tg://user?id=${userId}'>${userGameName}</a> –≤–æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

<i><code>–∏–Ω—Ñ–æ –∫–∞—Ä—Ç–∞</code></i> - <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–∞—Ö</b>
    `

    willChangHelpOption('mainHelp', 'hello'/*–°–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ */)
    willChangHelpOption('gameHelp', 'game')
    willChangHelpOption('propertyHelp', 'property')
    willChangHelpOption('adminHelp', 'admin')
    willChangHelpOption('restHelp', restHelp)
    willChangHelpOption('moderationHelp', '–º–æ–¥–µ—Ä–∞—Ü–∏—è')

    if (data === 'back') {
        willEditMessage()
    }
}

async function userInfoReplyToMessage(msg, bot, collection) {
    const userIdToGet = msg.reply_to_message?.from?.id;
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const text = msg.text
    const userId = msg.from.id

    const user = userIdToGet ? await collection.findOne({ id: userIdToGet }) : null

    if (text == '.infoid') {
        if (userId === adminId) {
            if (!!user) {
                if (userIdToGet) {
                    const userGameId = user.gameId;
                    const userGameName = user.userName;
                    const register_time = user.registerTime;
                    const userGameBalance = user.balance;
                    const ratesAll = user.rates.map((e) => e.all);
                    const ratesWin = user.rates.map((e) => e.wins);
                    const ratesLose = user.rates.map((e) => e.loses);
                    const userBankCard = user.bankCard[0].cardNumber
                    const cryptoCurAlt = user.crypto[0].altcoinidx

                    if (chatId == userId) {
                        await bot.sendMessage(chatId, `
<b>–ò–≥—Ä–æ–≤–æ–π üÜî:</b> ${userGameId}
<b>–ù–∏–∫ üë®:</b> <a href='tg://user?id=${userId}'>${userGameName}</a>
<b>–ë–∞–ª–∞–Ω—Å üí∏: ${userGameBalance}$</b>
<b>–ö–∞—Ä—Ç–∞: |<code>${userBankCard}</code>|</b>
<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ‚Üì</b>
   <b>Alt Coin IDX:</b> ${cryptoCurAlt}

<b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ${ratesAll} \n    –í—ã–∏–≥—Ä—ã—à–∏: ${ratesWin} \n    –ü—Ä–æ–∏–≥—Ä—ã—à–∏: ${ratesLose}</b>
<b>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìÜ:</b> ${register_time}
                        `, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
                    }
                    else {
                        await bot.sendMessage(chatId, `
<b>–ò–≥—Ä–æ–≤–æ–π üÜî:</b> ${userGameId}
<b>–ù–∏–∫ üë®:</b> <a href='tg://user?id=${userId}'>${userGameName}</a>
<b>–ë–∞–ª–∞–Ω—Å üí∏: ${userGameBalance}$</b>
<b>–ö–∞—Ä—Ç–∞: |<code>5444 **** **** ****</code>|</b>
<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ‚Üì</b>
   <b>Alt Coin IDX:</b> ${cryptoCurAlt}

<b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ${ratesAll} \n    –í—ã–∏–≥—Ä—ã—à–∏: ${ratesWin} \n    –ü—Ä–æ–∏–≥—Ä—ã—à–∏: ${ratesLose}</b>
<b>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìÜ:</b> ${register_time}
                        `, { parse_mode: 'HTML', reply_to_message_id: msg.message_id });
                    }
                }
                else {
                    bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ')
                }
            }
            else {
                bot.sendMessage(chatId, '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ')
            }
        }
        else {
            bot.sendMessage(chatId, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞', { reply_to_message_id: messageId })
        }
    }
}

async function sendPrivateMessage(userId, text, bot, userIdReq) {
    await bot.sendMessage(userId, `
–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ <a href='tg://user?id=${userIdReq}'>–í–ª–∞–¥–µ–ª–µ—Ü</a>
–¢–µ–∫—Å—Ç: ${text}
    `, { parse_mode: "HTML" });
}

async function userMsg(msg, bot) {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userIdReq = msg.from.id

    const parts = text.split(' ')

    if (text.startsWith('/msg')) {
        const userIdToSend = parts[1]
        if (userIdToSend) {
            const message = text.split(' ').slice(2).join(' ');
            sendPrivateMessage(userIdToSend, message, bot, userIdReq);
            bot.sendMessage(chatId, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–π–¥–∏ ${userIdToSend}.`);
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    }
}

async function deleteAllUsers(msg, collection, bot, ObjectId) {
    const chatId = adminId
    const text = msg.text
    const userId = msg.from.id

    if (text.toLowerCase() === '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
        if (userId === adminId) {
            const user = await collection.find({ _id: ObjectId })
            const deletedUsers = await user.map((doc) => doc.id).toArray();
            const allUsers = await collection.countDocuments() - 1

            bot.sendMessage(chatId, `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${allUsers}, –Ω–æ –≤—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å\n–•–æ–∑—è–∏–Ω <a href='tg://user?id=${adminId}'>–í–ª–∞–¥–µ–ª–µ—Ü</a>`, { parse_mode: 'HTML' })
            await deletedUsers.forEach(async (e) => {
                if (e != adminId) {
                    await collection.deleteOne({ id: e })
                }
            })
        }
        else {
            bot.sendMessage(userId, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞')
        }
    }
}

module.exports = {
    commandStart,
    commandHelp,
    commandHelpAsBtn,
    commandHelpInChats,
    userMsg,
    deleteAllUsers,
    userInfoReplyToMessage,
}
require('dotenv').config();
const mongoDbUrl = process.env.MONGO_DB_URL
const { MongoClient } = require('mongodb');
const { formatNumberInScientificNotation } = require('../systems/systemRu');
const { donatedUsers } = require('../donate/donatedUsers');
const client = new MongoClient(mongoDbUrl);

async function connection() {
    await client.connect();
}

async function addContainers(msg) {
    const db = client.db('bot');
    const collectionContainers = db.collection('containers');

    const text = msg.text

    if (text === 'addingContainer') {
        await collectionContainers.insertOne({
            cName: 'CTY -> Houses',
            cPrice: 30000,
            cPriceType: 'money',
            cType: 'houses',
            cInfo: `–° —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±—É–¥–µ—Ç –≤—ã–ø–∞–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ –¥–æ–º–∞`,
            cImg: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-RiPE1nqnrJgy8IvsrrquWDO6wngqpGjzYQ&usqp=CAU',
        }).then(() => {
            console.log('ok');
        }).catch((err) => {
            console.log('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤ ' + err);
        })
    }
}

async function listPriceMoneyContainers(msg, bot, collection) {
    const db = client.db('bot');
    const collectionContainers = db.collection('containers');

    const text = msg.text
    const chatId = msg.chat.id

    const userDonateStatus = await donatedUsers(msg, collection)

    if (['–∫–æ–Ω—Ç—ã', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã', 'conts', 'containers'].includes(text.toLowerCase())) {
        const containers = await collectionContainers.find({ cPriceType: 'money' }).sort({ cPrice: 1 }).toArray()

        let sortedContainers = '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        if (containers.length) {
            sortedContainers = containers.map((e, i) => {
                return `
${i + 1}. <b>${e.cName}</b> - <i>${e.cPrice.toLocaleString('de-DE')} ${formatNumberInScientificNotation(e.cPrice)}</i>
    <u>${e.cInfo}</u>
                `
            })
        }

        let caseOptions = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–¥–æ–Ω–∞—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã', callback_data: 'donateContainers' }],
                    [{ text: '–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', switch_inline_query_current_chat: '–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ' }]
                ]
            }
        }

        bot.sendMessage(chatId, `
${userDonateStatus}, –≤–æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã

${sortedContainers}
        `, {
            parse_mode: 'HTML',
            ...caseOptions,
        })
    }
}

async function buyPriceMoneyContainer(msg, bot, collection) {
    const db = client.db('bot');
    const collectionContainers = db.collection('containers');

    const text = msg.text
    const chatId = msg.chat.id
    const userId1 = msg.from.id
    const messageId = msg.message_id

    const user = await collection.findOne({ id: userId1 })
    const userBalance = user.balance
    const userDonateStatus = await donatedUsers(msg, collection)

    const parts = text.split(' ')
    const txt = '@levouJS_bot –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä'.toLowerCase()
    const txt2 = txt.slice(txt.split(' ')[0].length + 1)

    let glLength = 2
    if (text.toLowerCase().startsWith(txt)) {
        glLength = 3
    }
    else if (text.toLowerCase().startsWith(txt2)) {
    }
    else {
        return;
    }

    if (parts.length === glLength) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

<i><code>–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã</code></i>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const cont = await collectionContainers.find({ cPriceType: 'money' }).sort({ cPrice: 1 }).toArray()

    let sortedCont = '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ !'
    if (cont.length === 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, ${sortedCont}
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (isNaN(parts[glLength]) || parts[glLength] <= 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ !
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const contNumToOpen = parts[glLength]
    const selectedCont = cont[contNumToOpen - 1]

    if (selectedCont === undefined) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º !
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (userBalance < selectedCont.cPrice) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const contType = selectedCont.cType
    const img = selectedCont.cImg
    const price = selectedCont.cPrice
    contPriseType(msg, contType, collection, userId1, bot, chatId, img, price)
}

async function contPriseType(msg, contType, collection, userId1, bot, chatId, img, price) {
    const db = client.db('bot');
    const contPrise = db.collection(contType);
    const user = await collection.findOne({ id: userId1 })
    const userPriseType = user.properties[0][contType]

    const prise = await contPrise.find({ donate: false }).sort({ price: 1 }).toArray()
    const rundomiseNumber = prise.length

    const randomPrise = Math.floor(Math.random() * parseInt(rundomiseNumber)) + 1
    const randomedPrise = prise[randomPrise - 1]

    const userDonateStatus = await donatedUsers(msg, collection)

    let beReturnedMsg = `
${userDonateStatus}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä üéâ

<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞–º –≤—ã–ø–∞–ª–æ –∏–º—É—â–µ—Å—Ç–≤–æ <u>${randomedPrise.name}</u></b>
–£ –≤–∞—Å —É–∂–µ –±—ã–ª–æ –∏–º—É—â–µ—Ç—Å–≤–æ, –ø–æ—ç—Ç–æ–º—É –º—ã –µ–≥–æ –ø—Ä–æ–¥–∞–ª–∏ ü´°
–∏ –Ω–∞—á–∏—Å–ª–∏ –¥–µ–Ω–µ–≥ –≤ –≤–∞—à –±–∞–ª–∞–Ω—Å ü•≥
    `;

    if (userPriseType === '') {
        beReturnedMsg = `
${userDonateStatus}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä üéâ

<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞–º –≤—ã–ø–∞–ª–æ –∏–º—É—â–µ—Å—Ç–≤–æ <u>${randomedPrise.name}</u></b> üéÅ
<b>–í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Ü–µ–Ω—É –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–ø–∏—Å–∞–≤</b> <code>–¥–æ–º–∞</code> –∏–ª–∏ <code>–º–æ–π –¥–æ–º</code> 
        `
        const updateObj = {};
        updateObj[`properties.0.${contType}`] = randomedPrise.name;
        console.log(updateObj);

        await collection.updateOne({ id: userId1 }, { $set: updateObj });
        await collection.updateOne({ id: userId1 }, { $inc: { balance: -price } })

        bot.sendPhoto(chatId, img, {
            caption: `${beReturnedMsg}`,
            parse_mode: 'HTML',
        })
        return;
    }

    bot.sendPhoto(chatId, img, {
        caption: `${beReturnedMsg}`,
        parse_mode: 'HTML',
    })
    const newContPrise = await contPrise.findOne({ name: randomedPrise.name })
    const prisePrice = newContPrise.price * 0.9

    await collection.updateOne({ id: userId1 }, { $inc: { balance: prisePrice } })
}

async function donateContainers(msg, bot) {
    const data = msg.data
    const msgId = msg.id

    if (data === 'donateContainers') {
        bot.answerCallbackQuery(msgId, { show_alert: true, text: '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' })
    }
}

module.exports = {
    addContainers,
    listPriceMoneyContainers,
    buyPriceMoneyContainer,
    donateContainers,
}
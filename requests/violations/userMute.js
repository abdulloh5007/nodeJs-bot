const { adminDonatedUsers } = require('../donate/donatedUsers');

require('dotenv').config();
const adminIdInt = parseInt(process.env.ADMIN_ID_INT)

const timeUnits = {
    s: 1000, // —Å–µ–∫—É–Ω–¥–∞ (seconds)
    m: 60 * 1000, // –º–∏–Ω—É—Ç–∞ (minutes)
    h: 60 * 60 * 1000, // —á–∞—Å (hours)
    d: 24 * 60 * 60 * 1000, // –¥–µ–Ω—å (days)
};

async function mutePlayer(chatId, userId, muteDuration, muteCause, bot, collection) {
    const user = await collection.findOne({ id: userId })

    const adminDonateStatus = await adminDonatedUsers(userId, collection)
    if (!!user) {
        const userName = user.userName;
        if (user.can_send_messages === false) {
            bot.sendMessage(chatId, `${adminDonateStatus} —É–∂–µ –∑–∞–º—É—á–µ–Ω.`, {
                parse_mode: 'HTML',
            });
            return;
        }

        await bot.restrictChatMember(chatId, userId, {
            can_send_messages: false,
            until_date: Date.now() + muteDuration,
        })
        collection.updateOne({ id: userId }, { $set: { "userViolationsMute.0.mute": true } })
        collection.updateOne({ id: userId }, { $set: { "userViolationsMute.0.muteTime": muteDuration } })
        collection.updateOne({ id: userId }, { $set: { "userViolationsMute.0.cause": muteCause } })
        const userViolationsMute = user.userViolationsMute[0].mute

        let timeString = '';
        for (const [unit, duration] of Object.entries(timeUnits)) {
            if (muteDuration >= duration && muteDuration % duration === 0) {
                const durationValue = muteDuration / duration;
                timeString = `${durationValue}${unit}`;
                break;
            }
        }

        setTimeout(async () => {
            await bot.restrictChatMember(chatId, userId, {
                can_send_messages: true,
                until_date: 0,
            });
            if (userViolationsMute === false) {
                await bot.sendMessage(chatId, `<a href='tg://user?id=${userId}'>${userName}</a>\n–í—Ä–µ–º—è –º—É—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.`, {
                    parse_mode: 'HTML',
                });
            }

            collection.updateOne({ id: userId }, { $set: { "userViolationsMute.0.mute": false } })
            collection.updateOne({ id: userId }, { $set: { "userViolationsMute.0.muteTime": "0" } })
            collection.updateOne({ id: userId }, { $set: { "userViolationsMute.0.cause": "" } })

        }, muteDuration);

        const optMute = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–†–∞–∑–º—É—Ç–∏—Ç—å', callback_data: 'optUnmuteId'}
                    ]
                ]
            }
        }
        bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${adminDonateStatus} –∑–∞–º—É—á–µ–Ω –Ω–∞ ${timeString}.\n–ü—Ä–∏—á–∏–Ω–∞: ${muteCause}`, {
            parse_mode: 'HTML',
            ...optMute,
        });
    }
    else {
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`, {
            parse_mode: 'HTML',
        });
    }
}

async function userMuteId(msg, collection, bot) {
    const chatId = msg.chat.id;
    const adminId = msg.from.id;
    const text = msg.text;

    if (text && text.match(/^\/muteid (\d+) (\d+[smhd]) (.+)/)) {
        const match = text.match(/^\/muteid (\d+) (\d+[smhd]) (.+)/);
        const userIdToMute = parseInt(match[1]);
        const muteDurationString = match[2];
        const muteCause = match[3];

        const admin = await collection.findOne({ id: adminId });

        if (!admin) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.');
            return;
        }

        const durationUnit = muteDurationString.slice(-1).toLowerCase();
        const durationValue = parseInt(muteDurationString.slice(0, -1));

        if (isNaN(durationValue) || !(durationUnit in timeUnits)) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É—Ç–∞.');
            return;
        }

        const muteDuration = durationValue * timeUnits[durationUnit];
        const targetUser = await collection.findOne({ id: userIdToMute });

        if (!targetUser) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            return;
        }

        mutePlayer(chatId, userIdToMute, muteDuration, muteCause, bot, collection);
    }

}

async function userMute(msg, bot, collection) {
    const chatId = msg.chat.id;
    const senderId = msg.from.id;
    const text = msg.text;

    const parts = text && text.split(' ');

    if (text && text.startsWith('/mute ')) {
        if (parts.length >= 3) {
            if (senderId === adminIdInt) {
                const userIdToMute = msg.reply_to_message?.from?.id;

                if (userIdToMute) {
                    if (userIdToMute === senderId) {
                        bot.sendMessage(chatId, '–¢—ã –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞, –Ω–µ –¥–µ–ª–∞–π —ç—Ç–æ –∫–∞–∫ –±—É–¥—É –ø–æ—Ç–æ–º —è –±–µ–∑ —Ç–µ–±—è. üòâ');
                    } else {
                        const muteDurationString = parts[1];
                        const muteCause = parts.slice(2).join(' ');

                        const durationUnit = muteDurationString.slice(-1).toLowerCase();
                        const durationValue = parseInt(muteDurationString);

                        if (!isNaN(durationValue) && durationUnit in timeUnits) {
                            const muteDuration = durationValue * timeUnits[durationUnit];
                            mutePlayer(chatId, userIdToMute, muteDuration, muteCause, bot, collection);
                        } else {
                            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É—Ç–∞.', { parse_mode: 'HTML' });
                        }
                    }
                } else {
                    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞.');
                }
            } else {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
            }
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–∞ <code>/mute 10s –ø—Ä–∏—á–∏–Ω–∞</code>.', { parse_mode: 'HTML' });
        }
    }
}

async function userUnMute(msg, bot, collection) {
    const text = msg.text;
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userIdToUnMute = msg.reply_to_message?.from?.id;
    const user = await collection.findOne({ id: userIdToUnMute });

    if (text === '/unmute') {
        if (userId === adminIdInt) {

            if (!!user) {

                const userViolationMute = user.userViolationsMute[0].mute
                if (userViolationMute && userViolationMute === true) {
                    await bot.restrictChatMember(chatId, userIdToUnMute, {
                        can_send_messages: true,
                        until_date: 0,
                    });
                    bot.sendMessage(chatId, '–ú—É—Ç —Å –∏–≥—Ä–æ–∫–∞ —Å–Ω—è—Ç.');
                } else {
                    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º—É—á–µ–Ω.');
                }
            } else {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º—É—Ç–∞.\n–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ');
            }
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }
    }
}

// –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –æ–±—ä—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –±–æ—Ç –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è –Ω–µ —Å—Ç–∞–ª –ª–∞–≥–∞—Ç—å
async function userUnMuteAll(msg, bot, collection) {
    const text = msg.text;
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const cursor = collection.find({ "userViolationsMute.0.mute": true });

    // –°–æ–±–∏—Ä–∞–µ–º –∞–π–¥–∏ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–∞—Å—Å–∏–≤
    const mutedUserIds = await cursor.map((doc) => doc.id).toArray();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –∞–π–¥–∏ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —á–∞—Ç
    const mutedUserIdsString = mutedUserIds.join(', ');

    // –í—ã–≤–æ–¥–∏–º –∞–π–¥–∏ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç

    if (text === '/unmuteall') {
        if (userId === adminIdInt) {

            await mutedUserIds.forEach(async (e) => {
                const userIds = e;
                await bot.restrictChatMember(chatId, userIds, { can_send_messages: true, until_date: 0 });
            })
            bot.sendMessage(adminIdInt, `–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã ${mutedUserIdsString}`)
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        }
    }

}

module.exports = {
    userMute,
    userUnMute,
    userUnMuteAll,
    userMuteId,
};

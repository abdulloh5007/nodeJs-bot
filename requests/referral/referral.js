const { customChalk } = require("../../customChalk");
const { startOptions } = require("../../options");

const date = new Date()
const year = date.getFullYear()
const month = date.getMonth()
const day = date.getDate()
const hours = date.getHours()
const minutes = date.getMinutes()
const registerUserTime = `${day}-${month}-${year} ${hours}:${minutes}`

function generateRandomElementsOnlyUsers(letters, numbers) {
    const alphabet = letters;
    const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];

    let randomNumberString = '';
    for (let i = 0; i < numbers; i++) {
        randomNumberString += Math.floor(Math.random() * 10);
    }

    return randomLetter + randomNumberString;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
const onlyUsersId = generateRandomElementsOnlyUsers('BFNPRS', 7);

async function referral(msg, bot, collection) {
    const userId = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö—ç—à –æ—Ç userId)
    const referralCode = `ref_${userId}`;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await collection.updateOne({ id: userId }, { $set: { "referral.0.code": referralCode } });
    const user = await collection.findOne({ id: userId })
    const refAmount = user.referral[0].amount

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const referralLink = `https://t.me/levouJS_bot?start=${referralCode}`;
    bot.sendMessage(chatId, `
<b>–ü—Ä–∏–≥–ª–∞—à–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ 1.000 $</b>

<u><b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> <i>${refAmount}</i></u>

<b>–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <i>${referralLink}</i>
    `, { parse_mode: "HTML", reply_to_message_id: messageId, disable_web_page_preview: true });
}

async function startWithRef(msg, bot, collection) {
    const userId = msg.from.id
    const text = msg.text
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const referralCode = text.split(' ')[1];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–µ–Ω
    const referringUser = await collection.findOne({ "referral.0.code": referralCode });
    if (!referringUser) {
        bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.');
        return;
    }
    else {
        const user = await collection.findOne({ id: userId })

        if (user) {
            return;

            //             await bot.sendMessage(chatId, `
            // –ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id=${userId}'>–ò–≥—Ä–æ–∫</a> \n
            // <b>–¢—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É</b>
            // <i>–î–∞—Ç–∞ ${register_time}</i>
            //             `, { parse_mode: 'HTML', ...startOptions, reply_to_message_id: msg.message_id })
        }
        else {
            // –ï–°–õ–ò –í–°–Å –¢–ê–ö–ò –•–û–ß–ï–®–¨ –û–¢–ü–†–ê–í–ò–¢–¨ –°–¢–ò–ö–ï–†
            await collection.updateOne({ id: referringUser.id }, { $inc: { balance: 1000 } }); // –ü—Ä–∏–º–µ—Ä: –≤—ã–¥–∞—á–∞ 1000 –¥–µ–Ω–µ–≥ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            await collection.updateOne({ id: referringUser.id }, { $inc: { "referral.0.amount": 1 } })
            // console.log(referralCode);

            await bot.sendSticker(chatId, 'CAACAgIAAxkBAAEJuehkthTWSWEaOSTzdOjdX5T1rpuFEgACSQADQbVWDGATQ6Y8j8OALwQ')
                .then(() => {
                    bot.sendMessage(chatId, `
–í—ã —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

–ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id=${userId}'>–ò–≥—Ä–æ–∫</a> \n
–Ø-–∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã.\n
–¢–µ–±–µ –≤—ã–¥–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ üéÅ –≤ —Ä–∞–∑–º–µ—Ä–µ 10.000‚Ç¨.\n
–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –±–µ—Å–µ–¥—É –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏.\n
–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–æ–º–æ—â—å "–ü–æ–º–æ—â—å" |

+–í–∞–º –≤ –ø–æ–¥–∞—Ä–æ–∫ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø–ª–∞—Å—Ç–∏–∫ –∫–∞—Ä—Ç–∞ MasterCard
–ù–∞–ø–∏—à–∏—Ç–µ <code>–∫–∞—Ä—Ç–∞ –∏–Ω—Ñ–æ</code> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
            `, { parse_mode: 'HTML', ...startOptions, reply_to_message_id: msg.message_id })
                })
            const prefix = "5444";
            let cardNumber = prefix;
            for (let i = 0; i < 12; i++) {
                if (i % 4 === 0) {
                    cardNumber += " ";
                }
                cardNumber += Math.floor(Math.random() * 10).toString();
            }

            collection.insertOne({
                id: userId,
                gameId: onlyUsersId,
                userName: '–ò–≥—Ä–æ–∫',
                balance: 10000,
                uc: 0,
                registerTime: registerUserTime,
                altcoinidx: 0,
                checkPayment: 'not',
                lastBonusTime: 0,
                toBeAnAdmin: true,
                status: [{
                    statusName: 'player',
                    purchaseDate: 0,
                    statusExpireDate: 0,
                }],
                limit: [{
                    giveMoneyLimit: 5000000,
                    givedMoney: 0,
                    updateDayLimit: 0,
                    // promoMoneyLimit: 1000,
                    // promoMoney: 0,
                }],
                business: [{
                    bHave: false,
                    bName: "",
                    bWorkers: 0,
                    bMaxWorkers: 0,
                    bProfit: 0,
                    bWorkersProfit: 0,
                    bTax: 0,
                    lastUpdTime: 0,
                }],
                avatar: [{
                    waiting: '',
                    avaUrl: '',
                }],
                properties: [{
                    houses: '',
                    cars: '',
                }],
                referral: [{
                    code: '',
                    amount: 0,
                }],
                crypto: [{
                    altcoinidx: 0
                }],
                rates: [{
                    wins: 0,
                    loses: 0,
                    all: 0
                }],
                ban: [{
                    ban: false,
                    cause: "",
                    banTime: 0,
                    unbanTime: 0,
                }],
                bankCard: [{
                    cardHave: true,
                    cardNumber: cardNumber,
                    cardName: "mastercard",
                    cardOwner: '–ò–≥—Ä–æ–∫',
                    cardValue: 0,
                    cardPassword: 0,
                    cardOwnerId: userId
                }]
            })

            try {
                await bot.sendMessage(referringUser.id, `
<b>–° –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–∞–µ–ª—å</b>
<b>–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –≤ –±–∞–ª–∞–Ω—Å !</b>
                `, { parse_mode: 'HTML' })
            } catch (err) {
                if (err.response && err.response.statusCode === 403) {
                    console.log(customChalk.colorize(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referringUser.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`, { style: 'italic', background: 'bgRed' }));
                } else if (err.response && err.response.statusCode === 400) {
                    console.log(customChalk.colorize(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${referringUser.id} –Ω–µ—Ç —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º`, { style: 'italic', background: 'bgYellow' }))
                } else {
                    console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–∞ –∫ —Ä–µ—Ñ—Ñ–µ—Ä—É: ${err.message}`, { style: 'italic', background: 'bgRed' }));
                }
            }
        }

    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    const user = await collection.findOne({ id: userId });
    if (user) {
        const register_time = user.registerTime
        await bot.sendMessage(chatId, `
–ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id=${userId}'>–ò–≥—Ä–æ–∫</a> \n
<b>–¢—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É</b>
<i>–î–∞—Ç–∞ ${register_time}</i>
        `, { parse_mode: 'HTML', ...startOptions, reply_to_message_id: messageId })
        return;
    }
}

module.exports = {
    referral,
    startWithRef,
}
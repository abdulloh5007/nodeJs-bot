const { donatedUsers } = require("../donate/donatedUsers");
const { formatNumberInScientificNotation } = require('../systems/systemRu');
const { mongoConnect } = require('../../mongoConnect');


function generateRandomString(length) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * charactersLength);
        result += characters.charAt(randomIndex);
    }
    return result;
}

async function checkAndUpdateIslands(userId1) {
    const collectionIslands = await mongoConnect('islands')

    const island = await collectionIslands.findOne({ id: userId1 });
    const foods = parseInt(island.foods);
    const waters = parseInt(island.waters);
    const population = parseInt(island.population);
    const place = island.place;
    const workPopulation = island.workPopulation;

    // companies
    const airLines = parseInt(island.airLines);
    const restaurants = parseInt(island.restaurants);
    const shops = parseInt(island.shops);
    const boats = parseInt(island.boats);
    const carFactory = parseInt(island.carFactory);
    const allWorks = (airLines + restaurants + shops + boats + carFactory) * 6;

    // island workers profit
    const islandWorkersProfit = Math.floor(allWorks * 10);
    const islandWorkersBalance = Math.floor((islandWorkersProfit / 100) * 40);
    const islandOwnerBalance = Math.floor((islandWorkersProfit / 100) * 60);

    // island place
    const changedPopulation = Math.floor((foods + waters) / 20);
    const changedPlace = (changedPopulation / 5).toFixed(2);

    const returnedMessage = `
–±—ã–ª–æ: ${population.toLocaleString('de-DE')}
—Å—Ç–∞–ª–æ: ${changedPopulation.toLocaleString('de-DE')}

–±—ã–ª–æ: ${place} –∫–º¬≤
—Å—Ç–∞–ª–æ: ${changedPlace} –∫–º¬≤
–≤ –¥–∞—Ç–∞–±–∞–∑—É: ${changedPlace} –∫–º¬≤

–±—ã–ª–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: ${workPopulation.toLocaleString('de-DE')}
—Å—Ç–∞–ª–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: ${allWorks.toLocaleString('de-DE')}

–û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${islandWorkersProfit.toLocaleString('de-DE')}$
–ó–∞—Ä–ø–ª–∞—Ç–∞ –∂–∏—Ç–µ–ª–µ–π: ${islandWorkersBalance.toLocaleString('de-DE')}$ (40%)
–ó–∞—Ä–ø–ª–∞—Ç–∞ –º–µ—Ä—É –æ—Å—Ç—Ä–æ–≤–∞: ${islandOwnerBalance.toLocaleString('de-DE')}$ (60%)
    `

    await collectionIslands.updateOne({ id: userId1 }, {
        $set: {
            place: parseInt(changedPlace),
            workPopulation: parseInt(allWorks),
            population: changedPopulation,
        }
    });

    return returnedMessage;
}

async function openIsland(msg, bot, collection) {
    const collectionIslands = await mongoConnect('islands')

    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const userIsland = await collectionIslands.findOne({ id: userId1 })
    const user = await collection.findOne({ id: userId1 })
    const userName = user.userName
    const generatedString = generateRandomString(7)
    const startNameIsland = `–°–º–µ–Ω–∏ –∏–º—è –æ—Å—Ç—Ä–æ–≤–∞_${generatedString}`

    const date = new Date()
    date.setDate(date.getDate() + 1);

    if (!userIsland) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ —Å–≤–æ–π –æ—Å—Ç—Ä–æ–≤
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>${startNameIsland}</i>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        await collectionIslands.insertOne({
            id: userId1,
            name: startNameIsland,
            owner: userName,
            population: 10,
            workPopulation: 0,
            place: 2,
            balance: 1000,
            foods: 100,
            maxFoods: 5000,
            waters: 100,
            maxWaters: 5000,
            airLines: 0,
            restaurants: 0,
            shops: 0,
            boats: 0,
            carFactory: 0,
            lastProfitTime: date,
        })
        return;
    }

    const islandName = userIsland.name
    bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Å—Ç—Ä–æ–≤ –ø–æ–¥ 
<b>–ù–∞–∑–≤–∞–Ω–∏–µ–º:</b> <u>${islandName}</u>

<b>–ù–∞–ø–∏—à–∏—Ç–µ:</b> <code>–º–æ–π –æ—Å—Ç—Ä–æ–≤</code> –∏–Ω—Ñ–æ –æ–± –æ—Å—Ç—Ä–æ–≤–µ
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
}

/**
 * Retrieves information about a user's island and sends a message with the island details.
 * If the user does not have an island, a message is sent indicating that they need to open an island.
 * The function also updates the island's balance and other properties if it is time for the island to receive a profit.
 * @param {object} msg - The message object containing information about the user and chat.
 * @param {object} bot - The bot object used to send messages.
 * @param {object} collection - The collection object used to interact with the database.
 * @returns {Promise<void>}
 */
async function myIsland(msg, bot, collection) {
    const collectionIslands = await mongoConnect('islands')

    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    const userDonateStatus = await donatedUsers(msg, collection);
    const island = await collectionIslands.findOne({ id: userId });

    if (!island) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç –æ—Å—Ç—Ä–æ–≤–∞, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç–∫—Ä—ã—Ç—å –æ—Å—Ç—Ä–æ–≤ 
<b>–û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ !</b> <code>–æ—Ç–∫—Ä—ã—Ç—å –æ—Å—Ç—Ä–æ–≤</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    const {
        name: islandName,
        owner: islandOwner,
        population: islandPopulation,
        workPopulation: islandWorkPopulation,
        maxFoods: islandMaxFoods,
        maxWaters: islandMaxWaters,
        place: islandPlace,
        lastProfitTime,
        balance,
        foods,
        waters,
        airLines,
        restaurants,
        shops,
        boats,
        carFactory,
    } = island;

    const lastProfitDate = new Date(lastProfitTime).getDate().toLocaleString();
    const currentDate = new Date().getDate().toLocaleString();
    const formattedLastProfitDate = new Date(lastProfitTime).toLocaleString();
    const nextProfitDate = new Date();
    nextProfitDate.setDate(nextProfitDate.getDate() + 1);

    const allWorks = (airLines + restaurants + shops + boats + carFactory) * 6;
    const islandWorkersProfit = Math.floor(allWorks * 10);
    const islandWorkersBalance = Math.floor((islandWorkersProfit / 100) * 40);
    const islandOwnerBalance = Math.floor((islandWorkersProfit / 100) * 60);

    let txtMessage = `<b>üìÖ–í—Ä–µ–º—è –∑–∞—Ä–ø–ª–∞—Ç—ã:</b>\n  ‚îî<b>–î–∞—Ç–∞:</b> <i>${formattedLastProfitDate}</i>`;
    let willUpdImg = 1

    let mathIslandFoods = islandPopulation * 2
    if (mathIslandFoods > foods || mathIslandFoods > waters) {
        if (lastProfitDate <= currentDate) {
            willUpdImg = 2
            txtMessage = `<b>–ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ó–ü</b>\n  ‚îî<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>–ù–µ —Ö–≤–∞—Ç–∫–∞ –ø–∏—â–∏ !</i>`
        }
    }

    if (lastProfitDate <= currentDate && willUpdImg === 1) {
        await collectionIslands.updateOne({ id: userId }, {
            $inc: {
                balance: islandOwnerBalance,
                foods: -islandPopulation * 2,
                waters: -islandPopulation * 2,
            },
        }).then(() => {
            // updating profit
        }).catch((err) => {
            console.log('error island add profit ' + err);
        });

        await collectionIslands.updateOne({ id: userId }, { $set: { lastProfitTime: nextProfitDate } });

        txtMessage = `<b>üìÖ–í—Ä–µ–º—è –∑–∞—Ä–ø–ª–∞—Ç—ã:</b>\n  ‚îî<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –≤—ã–¥–∞—á—É –∑–∞—Ä–ø–ª–∞—Ç—ã ‚Üì</b>\n  ‚îî<b>–ù–æ–≤–∞—è –¥–∞—Ç–∞:</b> <i>${nextProfitDate.toLocaleDateString()}</i>\n  ‚îî<b>–ó–∞—Ä–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞:</b> <i>${islandOwnerBalance}</i>`;
        willUpdImg = 3
    }

    await checkAndUpdateIslands(userId);
    const newIslandBal = balance.toLocaleString('de-DE');
    const islandFoods = foods;
    const islandWaters = waters;
    const txtOfInfoIsland = `
${userDonateStatus}, –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤–∞—à –æ—Å—Ç—Ä–æ–≤üèù

<b>üèÑ‚Äç‚ôÇ–ú–µ—Ä:</b> <i>${islandOwner}</i>
<b>üòé–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>${islandName}</i>
<b>üí∞–ö–∞–∑–Ω–∞:</b> <i>${newIslandBal}$</i>
<b>üë´–ñ–∏—Ç–µ–ª–µ–π:</b> <i>${islandPopulation}</i>
    ‚îî<b>üë®‚Äçüåæ–†–∞–±–æ—Ç–∞—é—â–∏–µ:</b> <i>${islandWorkPopulation}</i>

<b>‚öñÔ∏è–ó–∞—Ä–ø–ª–∞—Ç–∞:</b>
    ‚îî<b>–ú–µ—Ä–∞:</b> <i>${islandOwnerBalance.toLocaleString('de-DE')}</i>$ (60%)
    ‚îî<b>–†–∞–±–æ—Ç–∞—é—â–∏—Ö:</b> <i>${islandWorkersBalance.toLocaleString('de-DE')}</i>$ (40%)

<b>üôé‚Äç‚ôÇ–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:</b> <i>${islandPlace}</i> –∫–º¬≤

<b>ü•ë–ü–∏—â–∏:</b>
    ‚îî<b>üå≠–ï–¥—ã:</b> <i>${islandFoods} / ${islandMaxFoods}</i>
    ‚îî<b>üí¶–í–æ–¥—ã:</b> <i>${islandWaters} / ${islandMaxWaters}</i>

<b>üë∑‚Äç‚ôÇ–†–∞–±–æ—Ç—ã:</b>
    ‚îî<b>üë®‚Äç‚úàÔ∏è–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏:</b> <i>${airLines} / 10</i>
    ‚îî<b>üè´–†–µ—Å—Ç–æ—Ä–∞–Ω—ã:</b> <i>${restaurants} / 10</i>
    ‚îî<b>üè™–ú–∞–≥–∞–∑–∏–Ω—ã:</b> <i>${shops} / 10</i>
    ‚îî<b>üõ•–ö–æ—Ä–∞–±–ª–µ–π:</b> <i>${boats} / 10</i>
    ‚îî<b>üöô–ó–∞–≤–æ–¥ –º–∞—à–∏–Ω:</b> <i>${carFactory} / 10</i>

${txtMessage}

<b>üòä–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç—Ä–æ–≤–∞üèù –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É!</b> <code>–∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç—Ä–æ–≤–∞</code>
<b>üí∏–í—ã —Å–∞–º–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É.
–°–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã –æ—Å—Ç—Ä–æ–≤–∞ —Ö–æ—Ç—å —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø—Ä–∏–≤–ª–µ–∫–∞–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ üòú.
–ù–∞–ø–∏—à–∏—Ç–µ <code>–æ—Å—Ç—Ä–æ–≤ –∏–Ω—Ñ–æ</code> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ—É–Ω–∫—Ü–∏—è</b>
    `

    // warn foods
    if (willUpdImg === 1) {
        bot.sendPhoto(chatId, 'https://th.bing.com/th/id/OIG.ThA5E_3NFpgSfzAiCSjK?pid=ImgGn', {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            caption: txtOfInfoIsland,
        }).then(async () => {
            // update successfull
        }).catch((err) => {
            console.log(err);
        });
    }
    // success
    else if (willUpdImg === 2) {
        bot.sendPhoto(chatId, 'https://th.bing.com/th/id/OIG.IFstvdD4MfSJei_iWp1H?pid=ImgGn', {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            caption: txtOfInfoIsland,
        }).then(async () => {
            // update successfull
        }).catch((err) => {
            console.log(err);
        });
    }
    // success upd time
    else if (willUpdImg === 3) {
        bot.sendPhoto(chatId, 'https://th.bing.com/th/id/OIG.mgtWLLSCtkqH1IdrXK6Z?pid=ImgGn&rs=1', {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            caption: txtOfInfoIsland,
        }).then(async () => {
            // update successfull
        }).catch((err) => {
            console.log(err);
        });
    }
}

async function islandCommands(msg, bot, collection) {
    const collectionIslands = await mongoConnect('islands')

    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const island = await collectionIslands.findOne({ id: userId1 })

    if (chatId !== userId1) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç—Ä–æ–≤–æ–≤ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —è –ø–æ—Å–µ–≤–µ—Ç—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
<code>–∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç—Ä–æ–≤–∞</code> –≤ –ª—Å –±–æ—Ç–∞
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (!island) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Å—Ç—Ä–æ–≤ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç—Ä–æ–≤–∞—Ö
—Å–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Å—Ç—Ä–æ–≤ –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É <b><code>–æ—Ç–∫—Ä—ã—Ç—å –æ—Å—Ç—Ä–æ–≤</code></b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    let islandsOptions = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏', switch_inline_query_current_chat: '–æ—Å—Ç—Ä–æ–≤ –∏–º—è ' },
                    { text: '–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏', switch_inline_query_current_chat: '–æ—Å—Ç—Ä–æ–≤ –∫–∞–∑–Ω–∞ —Å–Ω—è—Ç—å' },
                ],
                [
                    { text: '–ö—É–ø–∏—Ç—å –µ–¥—ã', switch_inline_query_current_chat: '+–æ—Å—Ç—Ä–æ–≤ –µ–¥–∞ ' },
                    { text: '–ö—É–ø–∏—Ç—å –≤–æ–¥—ã', switch_inline_query_current_chat: '+–æ—Å—Ç—Ä–æ–≤ –≤–æ–¥–∞ ' },
                ],
                [
                    { text: '–ö—É–ø–∏—Ç—å –∞–≤–∏–∫–æ–º–ø', switch_inline_query_current_chat: '+–æ—Å—Ç—Ä–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è ' },
                    { text: '–ö—É–ø–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω', switch_inline_query_current_chat: '+–æ—Å—Ç—Ä–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω ' },
                ],
                [
                    { text: '–ö—É–ø–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', switch_inline_query_current_chat: '+–æ—Å—Ç—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω ' },
                    { text: '–ö—É–ø–∏—Ç—å –∫–æ—Ä–∞–±–ª—å', switch_inline_query_current_chat: '+–æ—Å—Ç—Ä–æ–≤ –∫–æ—Ä–∞–±–ª—å ' },
                ],
                [
                    { text: '–ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω–∞–∑–∞–≤–æ–¥', switch_inline_query_current_chat: '+–æ—Å—Ç—Ä–æ–≤ –º–∞—à–∏–Ω–∞–∑–∞–≤–æ–¥ ' },
                ]
            ]
        }
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, üòÉ–≤–æ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç—Ä–æ–≤–æ–≤üèù

<b>üòé–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏:</b> - <i>–ò–∑–º–µ–Ω—è–µ—Ç –∏–º—è –æ—Å—Ç—Ä–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥—Ä—É–≥–∏—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤üèù</i>
<b>üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É:</b> - <i>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã –æ—Å—Ç—Ä–æ–≤–∞üèù</i>
<b>üõí–ö—É–ø–∏—Ç—å –µ–¥—ã:</b> - <i>–ü–æ–∫—É–ø–∫–∞ –µ–¥—ã –¥–ª—è –∂–∏—Ç–µ–ª–µ–πüë´</i>
<b>üö∞–ö—É–ø–∏—Ç—å –≤–æ–¥—ã:</b> - <i>–ü–æ–∫—É–ø–∫–∞ –≤–æ–¥—ã –¥–ª—è –∂–∏—Ç–µ–ª–µ–πüë´</i>

<b>üë∑‚Äç‚ôÇ–†–∞–±–æ—Ç—ã:</b>
  ‚îî<b>üßë‚Äç‚úàÔ∏è–ö—É–ø–∏—Ç—å –∞–≤–∏–∞–∫–æ–º–ø:</b> - <i>–ü–æ–∫—É–ø–∫–∞ –∞–≤–∏–∞–∫–æ–ø–∞–Ω–∏–∏ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π</i>
  ‚îî<b>üßë‚Äçüç≥–ö—É–ø–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω:</b> - <i>–ü–æ–∫—É–ø–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π</i>
  ‚îî<b>üè™–ö—É–ø–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω:</b> - <i>–ü–æ–∫—É–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π</i>
  ‚îî<b>üõ≥–ö—É–ø–∏—Ç—å –∫–æ—Ä–∞–±–ª—å:</b> - <i>–ü–æ–∫—É–ø–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π –¥–ª—è –∂–∏—Ç–µ–ª–µ–π</i>
  ‚îî<b>üèé–ö—É–ø–∏—Ç—å –º–∞—à–∏–Ω–∞–∑–∞–≤–æ–¥:</b> - <i>–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–æ–¥ –º–∞—à–∏–Ω –¥–ª—è –∂–∏—Ç–µ–ª–µ–π</i>

<b>üë∑–í —Ä–∞–±–æ—Ç–∞—Ö –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ 10 –∂–∏—Ç–µ–ª–µ–πüë¨ –≤ –∫–∞–∂–¥–æ–º –≤–∏–¥–µ —Ä–∞–±–æ—Ç</b>
<b>–ú–µ—Å—Ç–æ —Å–∞–º–∞ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π</b>
<b>–ñ–∏—Ç–µ–ª–∏ —Å–∞–º–∏ –ø—Ä–∏–±—ã–≤–∞—é—Ç –∫–æ–≥–¥–∞ –ø–∏—â–∏ –º–Ω–æ–≥–æü•™</b>
<b>–ü—Ä–∏–º–µ—Ä: 200–≤–æ–¥—ã –∏ 200–µ–¥–∞ = 20–∂–∏—Ç–µ–ª–µ–π = 4–∫–º¬≤</b>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
        ...islandsOptions
    })
}

async function islandProduct(msg, bot, collection, lenProdToBuy, lenValProdToBuy) {
    const collectionIslands = await mongoConnect('islands')

    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const island = await collectionIslands.findOne({ id: userId1 })

    const parts = text.split(' ')
    let prodToBuy = parts[lenProdToBuy]
    let valueProdToBuy = parts[lenValProdToBuy]

    const dataMap = {
        '–µ–¥–∞': { item: 'foods', name: '–µ–¥–∞', cost: 2, limit: 5000 },
        '–≤–æ–¥–∞': { item: 'waters', name: '–≤–æ–¥–∞', cost: 2, limit: 5000 },
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è': { item: 'airLines', name: '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è', cost: 25000, limit: 10 },
        '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': { item: 'restaurants', name: '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', cost: 17000, limit: 10 },
        '–º–∞–≥–∞–∑–∏–Ω': { item: 'shops', name: '–º–∞–≥–∞–∑–∏–Ω', cost: 13000, limit: 10 },
        '–∫–æ—Ä–∞–±–ª—å': { item: 'boats', name: '–∫–æ—Ä–∞–±–ª—å', cost: 15000, limit: 10 },
        '–º–∞—à–∏–Ω–∞–∑–∞–≤–æ–¥': { item: 'carFactory', name: '–º–∞—à–∏–Ω–∞–∑–∞–≤–æ–¥', cost: 20000, limit: 10 },
    }

    if (!prodToBuy || !(prodToBuy in dataMap)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
<b>–ü—Ä–∏–º–µ—Ä:</b> <code>+–æ—Å—Ç—Ä–æ–≤ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞] [–∫–æ–ª-–≤–æ]</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }
    prodToBuy = parts[lenProdToBuy].toLowerCase()
    valueProdToBuy = parseInt(parts[lenValProdToBuy])

    const userBalance = user.balance

    if (prodToBuy in dataMap) {

        if (!island) {
            bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –æ—Å—Ç—Ä–æ–≤–∞ —Å–Ω–∞—á–∞–ª–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –∫—É–ø–∏—Ç—å –≤–µ—â–∏ –¥–ª—è –Ω–µ–≥–æ
<code>–æ—Ç–∫—Ä—ã—Ç—å –æ—Å—Ç—Ä–æ–≤</code>
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        const { item, name, cost, limit } = dataMap[prodToBuy]
        const copms = island[dataMap[prodToBuy].item]

        if (!valueProdToBuy || isNaN(valueProdToBuy) || valueProdToBuy <= 0) {
            bot.sendMessage(chatId, `
${userDonateStatus}, –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ
<b>–ü—Ä–∏–º–µ—Ä:</b> <code>+–æ—Å—Ç—Ä–æ–≤ ${name} [–∫–æ–ª-–≤–æ]</code>
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        const finishedCost = Math.floor(cost * valueProdToBuy)

        if (valueProdToBuy + parseInt(copms) > limit) {
            bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —ç—Ç–æ –∑–¥–∞–Ω–∏–µ
<b>–¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ª–∏–º–∏—Ç —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>${name}</i> - <b>–º–∞–∫—Å –∫–æ–ª-–≤–æ</b> <i>${limit.toLocaleString('de-DE')}</i>
                `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            console.log(copms);
            return;
        }

        if (userBalance < finishedCost) {
            bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>${name}</i> - <b>–∫–æ–ª-–≤–æ:</b> <i>${valueProdToBuy.toLocaleString('de-DE')}</i>
–≠—Ç–æ—Ç –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å—Ç–æ–∏—Ç ${finishedCost.toLocaleString('de-DE')} ${formatNumberInScientificNotation(finishedCost)}

<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</b>
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–ª–∏ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –æ—Å—Ç—Ä–æ–≤

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>${name}</i> - <b>–∫–æ–ª-–≤–æ:</b> <i>${valueProdToBuy.toLocaleString('de-DE')}</i>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })

        const updateObj = {}
        updateObj[item] = valueProdToBuy

        await collectionIslands.updateOne({ id: userId1 }, { $inc: updateObj }).then(async () => {
            await checkAndUpdateIslands(userId1)
            //             bot.sendMessage(chatId, `
            // ${userDonateStatus}, –æ–±–Ω–æ–≤–ª–µ–Ω–∞
            // ${newMessage}
            //             `, {
            //                 parse_mode: 'HTML',
            //                 reply_to_message_id: messageId,
            //             })
        }).catch(err => {
            console.log(err);
        })
        await collection.updateOne({ id: userId1 }, { $inc: { balance: -finishedCost } })
    }
}

async function islandNewName(msg, bot, collection, lenNewName) {
    const collectionIslands = await mongoConnect('islands')

    const userId1 = msg.from.id
    const text = msg.text;
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    const userDonateStatus = await donatedUsers(msg, collection);
    const newName = text.slice(lenNewName + 1);
    const island = await collectionIslands.findOne({ id: userId1 })

    if (!island) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ
–µ–≥–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ <code>–æ—Ç–∫—Ä—ã—Ç—å –æ—Å—Ç—Ä–æ–≤</code>
        `)
        return;
    }

    if (!newName) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
<b>–ü—Ä–∏–º–µ—Ä:</b> <code>–æ—Å—Ç—Ä–æ–≤ –∏–º—è [–Ω–æ–≤–æ–µ –∏–º—è]</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    };

    if (newName.length > 30) {
        bot.sendMessage(chatId, `
${userDonateStatus}, <b>–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const willChangeName = await collectionIslands.findOne({ name: newName });

    if (willChangeName) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
<b>–ù–æ–≤–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> <i>${newName}</i>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
    await collectionIslands.updateOne({ id: userId1 }, { $set: { name: newName.toString() } })
}

async function infoIslandProfit(msg, bot, collection) {
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)

    bot.sendMessage(chatId, `
${userDonateStatus}, –∏–Ω—Ñ–æ

<b>–í—ã –∫–æ–≥–¥–∞ –ø–∏—à–∏—Ç–µ -</b> <i><code>–º–æ–π –æ—Å—Ç—Ä–æ–≤</code></i> 
–±–æ—Ç –≤—ã–¥–∞–µ—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –≤–∞—à –æ—Å—Ç—Ä–æ–≤ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ—É

<b>–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Ä–µ–º—è –∑–∞—Ä–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–æ –∏–ª–∏ –Ω–µ—Ç —ç—Ç–æ –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å –∫–æ–≥–¥–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ—É –∑–∞ –≤–∞—à –æ—Å—Ç—Ä–æ–≤</b>

<b>–ö–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç -</b> –≤—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —á—Ç–æ –≤—Ä–µ–º—è –∑–∞—Ä–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –æ–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∑–Ω—É –æ—Å—Ç—Ä–æ–≤–∞ 
<b><i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã -</i></b> —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É –º–æ–π –æ—Å—Ç—Ä–æ–≤ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç–µ <b>–ó–ü</b> –Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç–µ –µ–≥–æ –≤—Ä–µ–º—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é <b>–ó–ü</b> 

<b>–ê —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ó–ü (–ù–∞–ø—Ä–∏–º–µ—Ä) 5 –¥–Ω–µ–π ?</b> - –Ω–µ—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ –µ—Å–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–π –æ—Å—Ç—Ä–æ–≤ —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–∏ —Å–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É, –Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ 1 –¥–µ–Ω—å 

<b>–≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —á—Ç–æ–±—ã –æ—Å—Ç—Ä–æ–≤–∞ —Ö–æ—Ç—å —ç—Ç–∏–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–∏–≤–ª–µ–∫–∞–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–µ–±—è —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ —Å–æ–≤–∏ –æ—Å—Ç—Ä–æ–≤–∞ !</b>

<b>–ï—à–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ—Å—Ç—å 3 –≤–∏–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤—ã —Å–∞–º–∏ —É–∑–Ω–∞–µ—Ç–µ –æ –Ω–∏—Ö –≤ –ø—Ä–æ—Ç–µ–∂–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –æ—Å—Ç—Ä–æ–≤–∞</b>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
}

async function takeOfProfitIsland(msg, bot, collection) {
    const collectionIslands = await mongoConnect('islands')

    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const island = await collectionIslands.findOne({ id: userId1 })

    if (!island) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ
–µ–≥–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ <code>–æ—Ç–∫—Ä—ã—Ç—å –æ—Å—Ç—Ä–æ–≤</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const iBalance = island.balance
    if (iBalance === 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –∏ —Ç–∞–∫ –Ω–µ—Ç—É –¥–µ–Ω–µ–≥ —á—Ç–æ–±—ã –∏—Ö —Å–Ω—è—Ç—å !
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ –¥–µ–Ω–µ–≥ —Å –æ—Å—Ç—Ä–æ–≤–∞
<b>–ö–æ–ª-–≤–æ:</b> <i>${iBalance.toLocaleString('de-DE')}$ ${formatNumberInScientificNotation(iBalance)}</i>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
    await collection.updateOne({ id: userId1 }, { $inc: { balance: Math.floor(iBalance) } })
    await collectionIslands.updateOne({ id: userId1 }, { $set: { balance: 0 } })
}

module.exports = {
    openIsland,
    myIsland,
    islandCommands,
    islandProduct,
    islandNewName,
    infoIslandProfit,
    takeOfProfitIsland,
}
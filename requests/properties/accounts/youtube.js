const { mongoConnect } = require("../../../mongoConnect");
const { donatedUsers } = require("../../donate/donatedUsers");
const { generateRandomString } = require("../../islands/islands");

async function openYTAcc(msg, bot) {
    const collection = await mongoConnect('users');

    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userYTacc = user.youtube[0].have

    const myYTbtn = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì±–ú–æ–π –∫–∞–Ω–∞–ª', switch_inline_query_current_chat: '–º–æ–π —é—Ç—É–±' }]
            ]
        }
    }

    if (userYTacc === true) {
        const userYTaccName = user.youtube[0].name
        return bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —é—Ç—É–± –∫–∞–Ω–∞–ª
<i>–ü–æ–¥ –∏–º–µ–Ω–µ–º:</i> <b>${userYTaccName}</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...myYTbtn,
        })
    }

    const nameYoutube = generateRandomString(9)
    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ —Å–≤–æ–π —é—Ç—É–± –∫–∞–Ω–∞–ª
<i>–ü–æ–¥ –∏–º–µ–Ω–µ–º</i> <b>${nameYoutube}</b>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
        ...myYTbtn
    })
    await collection.updateOne({ id: userId1 }, {
        $set: {
            youtube: [{
                have: true,
                name: nameYoutube,
                owner: userId1,
                videos: 0,
                likes: 0,
                subscribed: [],
                subscribers: 0,
                profit: 10,
            }]
        }
    })
}

async function infoMyYTacc(msg, bot) {
    const collection = await mongoConnect('users');

    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userYThave = user.youtube[0].have

    const openYTaccBtn = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üöÄ–û—Ç–∫—Ä—ã—Ç—å —é—Ç—É–±', switch_inline_query_current_chat: '–æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–±' }]
            ]
        }
    }

    if (userYThave === false) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç —é—Ç—É–±—É –∫–∞–Ω–∞–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –Ω–∏–∂–µ
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...openYTaccBtn,
        })
    }

    const uYTname = user.youtube[0].name
    const uYTowner = user.userName
    const uYTvideos = user.youtube[0].videos
    const uYTlikes = user.youtube[0].likes
    const uYTsubsbed = user.youtube[0].subscribed
    const uYTsubs = user.youtube[0].subscribers
    const uYTprofit = user.youtube[0].profit

    const YTinfoBtn = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üñç–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫', switch_inline_query_current_chat: '+–Ω–∏–∫ —é—Ç—É–± ' },
                    { text: 'üí∏–°–Ω—è—Ç—å –ø—Ä–∏–±—ã–ª—å', switch_inline_query_current_chat: '—é—Ç—É–± –ø—Ä–∏–±—ã–ª—å' },
                ],
                [
                    { text: 'üìØ–í—ã–ª–æ–∂–∏—Ç—å –≤–∏–¥–µ–æ', switch_inline_query_current_chat: '—é—Ç—É–± –≤–∏–¥–µ–æ' },
                ]
            ]
        }
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤–∞—à –∫–∞–Ω–∞–ª YOUTUBEüì±

<i>üìå–í–ª–∞–¥–µ–ª–µ—Ü:</i> <b>${uYTowner}</b>
<i>ü™™–ù–∞–∑–≤–∞–Ω–∏–µ:</i> <b>${uYTname}</b>

<i>üé¨–í–∏–¥–µ–æ:</i> <b>${uYTvideos}</b>
<i>‚ù§Ô∏è–õ–∞–π–∫–∏:</i> <b>${uYTlikes.toLocaleString('de-DE')}</b>

<i>üë®‚Äçüëß‚Äçüë¶–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</i> <b>${uYTsubs.toLocaleString('de-DE')}</b>
<i>üí∞–ü—Ä–∏–±—ã–ª—å:</i> <b>${uYTprofit}</b>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
        ...YTinfoBtn,
    })
}

async function changeNameYT(msg, bot, len) {
    const collection = await mongoConnect('users');

    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const parts = text.split(' ')

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const uYThave = user.youtube[0].have

    const openYTaccBtn = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üöÄ–û—Ç–∫—Ä—ã—Ç—å —é—Ç—É–±', switch_inline_query_current_chat: '–æ—Ç–∫—Ä—ã—Ç—å —é—Ç—É–±' }]
            ]
        }
    }

    if (uYThave === false) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç YOUTUBE –∫–∞–Ω–∞–ª–∞
<b>–°–Ω–∞—á–∞–ª–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
            ...openYTaccBtn,
        })
    }

    const newNick = parts[len]

    if (newNick === undefined || newNick.length < 5) {
        return bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–≤—ã–π –Ω–∏–∫
<b>–ù–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 5-–∑–Ω–∞–∫–æ–≤</b> 
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ 
<i>—Å–≤–æ–µ–≥–æ YOUTUBE –∫–∞–Ω–∞–ª–∞ –Ω–∞:</i> <b>${newNick}</b>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })

    await collection.updateOne({ id: userId1 }, { $set: { "youtube.0.name": newNick } })
}

module.exports = {
    openYTAcc,
    infoMyYTacc,
    changeNameYT,
}
const { donatedUsers } = require('../../donate/donatedUsers');
const { formatNumberInScientificNotation } = require('../../systems/systemRu');
const { customChalk } = require('../../../customChalk');
const { mongoConnect } = require('../../../mongoConnect');
require('dotenv').config()

const adminId = parseInt(process.env.ADMIN_ID_INT)

async function addBusiness(msg, bot) {
    const collectionBusiness = await mongoConnect('businesses')

    const text = msg.text
    const chatId = msg.chat.id
    const userId = msg.from.id

    if (userId !== adminId) {
        bot.sendMessage(chatId, `
–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
    }

    collectionBusiness.insertOne({
        name: 'Samsung üì±',
        price: 1500000,
        img: 'https://www.ixbt.com/img/n1/news/2023/0/2/Samsung_Electronics_large_large_large.jpg',
        maxWorkers: 130,
        workersProfit: 1600,
        tax: 0,
    })
    bot.sendMessage(chatId, `–£—Å–ø–µ—à–Ω–æ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –±–∏–∑–Ω–µ—Å`)
}

async function listBusinesses(msg, bot, collection) {
    const collectionBusiness = await mongoConnect('businesses')

    const text = msg.text
    const chatId = msg.chat.id

    const userDonateStatus = await donatedUsers(msg, collection)
    const business = await collectionBusiness.find({}).sort({ price: 1 }).toArray()
    const sortedBusinesses = business.map((e, i) => {
        return `
${i + 1}. ${e.name} - ${e.price.toLocaleString('de-DE')} ${formatNumberInScientificNotation(e.price)}`
    })

    let businessOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ö—É–ø–∏—Ç—å', switch_inline_query_current_chat: '–∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å ' }]
            ]
        }
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã

${sortedBusinesses}

<i>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å –Ω–∞–ø–∏—à–∏—Ç–µ:</i> <u><code>–∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å [–Ω–æ–º–µ—Ä]</code></u>
    `, { parse_mode: 'HTML', ...businessOptions })
}

async function buyBusiness(msg, bot, collection, glLength) {
    const collectionBusiness = await mongoConnect('businesses')
    const business = await collectionBusiness.find({}).sort({ price: 1 }).toArray()

    const text = msg.text
    const chatId = msg.chat.id
    const userId1 = msg.from.id

    const user = await collection.findOne({ id: userId1 })
    const userDonateStatus = await donatedUsers(msg, collection)
    const parts = text.split(' ')

    if (parts.length === glLength) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å
        `, { parse_mode: 'HTML' })
        return;
    }

    if (parts[glLength] < 1) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –º–µ–Ω—å—à–µ 1
        `, { parse_mode: 'HTML' })
        return;
    }

    const bNumToBuy = parts[glLength]
    const selectedBusiness = business[bNumToBuy - 1]
    const userBalance = user.balance
    const userBusiness = user.business[0].name

    if (userBusiness !== '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º <u>${userBusiness}</u>
        `, { parse_mode: 'HTML' })
        return;
    }

    if (!selectedBusiness) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Ç–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ <code>–±–∏–∑–Ω–µ—Å—ã</code>
—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±–∏–∑–Ω–µ—Å–∞—Ö
        `, {
            parse_mode: 'HTML',
        })
        return;
    }

    if (userBalance < selectedBusiness.price) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
        `, { parse_mode: 'HTML' })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ${selectedBusiness.name}
    `, { parse_mode: "HTML" })

    await collection.updateOne({ id: userId1 }, { $set: { "business.0.name": selectedBusiness.name, "business.0.maxWorkers": selectedBusiness.maxWorkers, "business.0.workersProfit": selectedBusiness.workersProfit, "business.0.tax": selectedBusiness.tax, "business.0.have": true, "business.0.workers": 20 } })
    await collection.updateOne({ id: userId1 }, { $inc: { balance: -selectedBusiness.price } })
}

async function infoBusiness(msg, bot, collection) {
    const collectionBusiness = await mongoConnect('businesses')

    const userId1 = msg.from.id
    const chatId = msg.chat.id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userBusiness = user.business[0].name

    if (userBusiness === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞

<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å:</i> <u><code>–±–∏–∑–Ω–µ—Å—ã</code></u>
        `, { parse_mode: 'HTML' })
        return;
    }

    const business = await collectionBusiness.findOne({ name: userBusiness })
    const bPhoto = business.img
    const maxWorkers = business.maxWorkers
    const workersProfit = business.workersProfit
    const tax = user.business[0].tax

    const profit = user.business[0].profit
    const workers = user.business[0].workers
    const speeds = user.business[0].speeds
    const workersProfitHour = workersProfit * workers
    const localedStringProfitWorkers = `${workersProfitHour.toLocaleString('de-DE')} ${formatNumberInScientificNotation(workersProfitHour)}`
    const endProfit = Math.floor(workersProfitHour * 2)
    const dayCount = Math.floor((endProfit - tax) / (workersProfitHour / 2))
    const dayCountTxt = dayCount !== 0 ? `<b>¬ª –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${dayCount} –¥–Ω—è</b>` : '<b>¬ª –í–∞—à –±–∏–∑–Ω–µ—Å –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç üß®</b>'

    let businessKb = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üöÄ–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏', switch_inline_query_current_chat: '–±–∏–∑–Ω–µ—Å –Ω–∞–ª–æ–≥–∏' },
                    { text: 'üí∞–°–Ω—è—Ç—å –ø—Ä–∏–±—ã–ª—å', switch_inline_query_current_chat: '–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å' }
                ],
                [
                    { text: 'üë®‚Äçüîß–ö—É–ø–∏—Ç—å –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤', switch_inline_query_current_chat: '–∫—É–ø–∏—Ç—å –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ 5' },
                    { text: 'üß®–ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å', switch_inline_query_current_chat: '–ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å' }
                ],
                [
                    { text: 'üß∞–ö—É–ø–∏—Ç—å —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å', switch_inline_query_current_chat: '–∫—É–ø–∏—Ç—å –±–±—É—Å—Ç 1' },
                    { text: '‚ö°Ô∏è–£—Å–∫–æ—Ä–∏—Ç—å', switch_inline_query_current_chat: '–±–∏–∑–Ω–µ—Å —É—Å–∫–æ—Ä–∏—Ç—å' },
                ]
            ]
        }
    }

    bot.sendPhoto(chatId, bPhoto, {
        parse_mode: 'HTML',
        caption: `
${userDonateStatus}, –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ üèó

‚îå <i>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:</i> <b>${userBusiness}</b>
‚îú <i>–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:</i> <b>${workers}</b>
‚îú <i>–ú–∞–∫—Å –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:</i> <b>${maxWorkers}</b>
‚îî <i>–ü—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å:</i> <b>${workers >= 1 ? localedStringProfitWorkers : 0}</b>

<i>¬ª –û–±—â–∏–π –ø—Ä–∏–±—ã–ª—å:</i> <b>${profit.toLocaleString('de-DE')} ${formatNumberInScientificNotation(profit)}</b>
<i>¬ª –ù–∞–ª–æ–≥–∏:</i> <b>${tax.toLocaleString('de-DE')} ${formatNumberInScientificNotation(tax)}</b>
<i>¬ª –£—Å–∫–æ—Ä–∏—Ç–µ–ª–∏:</i> <b>${speeds} ‚ö°Ô∏è</b>

<i>¬ª –ü—Ä–∏–±—ã–ª—å –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –ø–æ:</i> <b>${workersProfit.toLocaleString('de-DE')} ${formatNumberInScientificNotation(workersProfit)}</b>

<i>¬ª ‚ùóÔ∏è–ï—Å–ª–∏ –≤–∞—à–∏ –Ω–∞–ª–æ–≥–∏ –±—É–¥—É—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å <b>${endProfit.toLocaleString('de-DE')}</b> —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç 4 —Ä–∞–∑–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏</i>
${dayCountTxt}
        `,
        ...businessKb,
    })

    // <i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞—Ö –Ω–∞–ø–∏—à–∏—Ç–µ:</i> <u><code>–∏–Ω—Ñ–æ –±—Ä–∞–±–æ—Ç–Ω–∏–∫–∏</code></u>
    // <i>–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:</i> <u><code>–±–∏–∑–Ω–µ—Å –Ω–∞–ª–æ–≥–∏</code></u>
    // <i>–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –ø—Ä–∏–±—ã–ª—å:</i> <u><code>–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å</code></u>
}

async function workersInfo(msg, bot, collection) {
    const collectionBusiness = await mongoConnect('businesses')

    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id

    const user = await collection.findOne({ id: userId1 })
    const userDonateStatus = await donatedUsers(msg, collection)
    const userBusiness = user.business[0].name

    let messageB = `
–£ –≤–∞—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–∞–∑–Ω–µ—Å–∞
–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤ —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–±–∏–∑–Ω–µ—Å—ã</code>
`;
    let haveB = true;
    if (userBusiness === '') {
        haveB = false;
    }

    const business = await collectionBusiness.findOne({ name: userBusiness })
    const workersProfit = haveB === true ? business.workersProfit : null
    const procent20 = Math.floor((workersProfit / 100) * 20)
    const workersPrice = workersProfit + procent20

    if (haveB === true) {
        messageB = `
‚îå <i>–í–∞—à –±–∏–∑–Ω–µ—Å:</i> <b>${userBusiness}</b>
‚îú <i>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:</i> <b>${workersPrice}</b>
‚îî <i>–ü—Ä–∏–±—ã–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:</i> <b>${workersProfit}</b>
        `
    }

    let workersOptions = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üë®‚Äçüîß–ö—É–ø–∏—Ç—å –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤', switch_inline_query_current_chat: '–∫—É–ø–∏—Ç—å –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ ' }]
            ]
        }
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ –ø–æ—Ö–æ–∂–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É

–¶–µ–Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å–º–æ—Ç—Ä—è –Ω–∞ —Ü–µ–Ω—É –±–∏–∑–Ω–µ—Å–∞ 
–ö–∞–∫–æ–π —É –≤–∞—Å –ª—É—á—à–∏–π –±–∏–∑–Ω–µ—Å –∏ —Ç–∞–º –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
${messageB}
    `, { parse_mode: 'HTML', ...workersOptions })
}

async function buyWorkers(msg, bot, collection, glLength) {
    const collectionBusiness = await mongoConnect('businesses')

    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userBname = user.business[0].name
    const userBalance = user.balance
    const userStatus = user.status[0].statusName
    const userworkers = user.business[0].workers
    const usermaxWorkers = user.business[0].maxWorkers
    const userTax = user.business[0].tax

    const parts = text.split(' ')

    if (parts.length === glLength) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å

<u><code>–∫—É–ø–∏—Ç—å –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ [–∫–æ–ª-–≤–æ]</code></u>
`, { parse_mode: 'HTML' })
        return;
    }

    if (userBname === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤

<i>–ù–∞–ø–∏—à–∏—Ç–µ:</i> <u><code>–±–∏–∑–Ω–µ—Å—ã</code></u> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±–∏–∑–Ω–µ—Å–∞—Ö
        `, { parse_mode: 'HTML' })
        return;
    }

    const amountworkers = parts[glLength]
    const amountToBuyWorkersAndworkers = parseInt(amountworkers) + parseInt(userworkers)

    if (isNaN(amountworkers) || amountworkers <= 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</i>
        `, { parse_mode: 'HTML' })
        return;
    }

    if (amountToBuyWorkersAndworkers > usermaxWorkers) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å, –ø—Ä–µ–≤—ã—à–∞–µ—Ç 
–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –±–∏–∑–Ω–µ—Å–∞

<i>–ù–∞–ø–∏—à–∏—Ç–µ:</i> <u><code>–º–æ–π –±–∏–∑–Ω–µ—Å</code></u>
–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ
–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –±–∏–∑–Ω–µ—Å–∞
        `, { parse_mode: 'HTML' })
        return;
    }

    const business = await collectionBusiness.findOne({ name: userBname })
    const workersProfit = business.workersProfit
    let procent20 = Math.floor((workersProfit / 100) * 20)

    let message;
    if (userStatus === 'premium') {
        procent20 = Math.floor((workersProfit / 100) * 10)
        message = `
<i>¬ª ${userStatus.toUpperCase()}</i> <b>10% —Å–∫–∏–¥–∫–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</b>`
    }
    else if (userStatus === 'vip') {
        procent20 = Math.floor((workersProfit / 100) * 13)
        message = `
<i>¬ª ${userStatus.toUpperCase()}</i> <b>7% —Å–∫–∏–¥–∫–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</b>`
    }
    else if (userStatus === 'standart') {
        procent20 = Math.floor((workersProfit / 100) * 15)
        message = `
<i>¬ª ${userStatus.toUpperCase()}</i> <b>5% —Å–∫–∏–¥–∫–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</b>`
    }
    else {
        procent20 = 0
        message = ``
    }

    const workersPrice = Math.floor(workersProfit + procent20)
    const possibleBuyworkers = Math.floor(userBalance / workersPrice)
    const finishedToBuyworkers = workersPrice * amountworkers

    if (userBalance < finishedToBuyworkers) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${amountworkers} 
–±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤

<i>–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å:</i> <b>${possibleBuyworkers}</b>
        `, { parse_mode: 'HTML' })
        return;
    }

    if (userTax !== 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —Å–Ω–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç–∏ –Ω–∞–ª–æ–≥–∏ –ø—Ä–µ–∂–¥–µ —á–µ–º –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã—Ö
–±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        `, {
            parse_mode: 'HTML',
        })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${amountworkers} –±—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
<i>–°—É–º–º–∞:</i> <b>${finishedToBuyworkers.toLocaleString('de-DE')} ${formatNumberInScientificNotation(finishedToBuyworkers)}</b>
${message}
    `, { parse_mode: 'HTML' })

    await collection.updateOne({ id: userId1 }, { $inc: { "business.0.workers": parseInt(amountworkers), balance: -finishedToBuyworkers } })
}

async function addProfitEveryOneHour(collection) {
    const users = await collection.find({ "business.0.have": true }).toArray()
    const userDonateStatus = await donatedUsers(msg, collection)

    for (let i = 0; i < users.length; i++) {
        const el = users[i];
        const userworkers = el.business[0].workers
        const userworkersProfit = el.business[0].workersProfit
        const addToProfit = userworkers * userworkersProfit
        const usertax = el.business[0].tax
        const endTax = Math.floor(addToProfit * 2)
        const daysCount = Math.floor((endTax - usertax) / (addToProfit / 2)) - 1

        if (usertax >= endTax) {
            try {
                await bot.sendMessage(el.id, `
${userDonateStatus}, <b>–í–∞—à –±–∏–∑–Ω–µ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—ã–ª –∑–∞–∫—Ä—ã—Ç —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ üí£</i>
<b>–ù–µ —Å–∫–∞–∂–∏ —á—Ç–æ –º—ã –Ω–µ –≥–æ–≤–æ—Ä–∏–ª–∏</b>
                `, {
                    parse_mode: 'HTML',
                })
            } catch (err) {
                if (err.response && err.response.statusCode === 403) {
                    console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
                } else if (err.response && err.response.statusCode === 400) {
                    console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
                } else {
                    console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
                }
            }
            await collection.updateOne({ id: el.id }, {
                $set: {
                    "business.0.have": false,
                    "business.0.name": '',
                    "business.0.workers": 0,
                    "business.0.maxWorkers": 0,
                    "business.0.profit": 0,
                    "business.0.workersProfit": 0,
                    "business.0.tax": 0,
                    "business.0.lastUpdTime": 0,
                }
            })
            return;
        }

        try {
            await bot.sendMessage(el.id, `
${userDonateStatus}, <b>–°–ö–û–†–ï–ï ! –ü–ò–®–ò</b> <code>–±–∏–∑–Ω–µ—Å –Ω–∞–ª–æ–≥–∏</code>
<b>–ê —Ç–æ –ø–æ—Å–ª–µ ${daysCount} –¥–Ω—è —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ –±—É–¥–µ—Ç !</b>

<b>–°–ê–ú–ê–Ø –ì–õ–ê–í–ù–ê–Ø –ù–û–í–û–°–¢–¨ –Ø –ü–†–ò–ù–ï–° –¢–ï–ë–ï –ó–ê–†–ü–õ–ê–¢–£üòâ</b>
            `, {
                parse_mode: 'HTML',
            })
        } catch (err) {
            if (err.response && err.response.statusCode === 403) {
                console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
            } else if (err.response && err.response.statusCode === 400) {
                console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
            } else {
                console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
            }
        }
        collection.updateOne({ id: el.id }, { $inc: { "business.0.profit": parseInt(addToProfit), "business.0.tax": parseInt(Math.floor(addToProfit / 2)) } })
    }
    return;
}

async function manualAddProfitEveryOneHour(msg, bot, collection) {
    const users = await collection.find({ "business.0.have": true }).toArray()
    const userDonateStatus = await donatedUsers(msg, collection)

    for (let i = 0; i < users.length; i++) {
        const el = users[i];
        const userworkers = el.business[0].workers
        const userworkersProfit = el.business[0].workersProfit
        const addToProfit = userworkers * userworkersProfit
        const usertax = el.business[0].tax
        const endTax = Math.floor(addToProfit * 2)
        const daysCount = Math.floor((endTax - usertax) / (addToProfit / 2)) - 1

        if (usertax >= endTax) {
            try {
                await bot.sendMessage(el.id, `
${userDonateStatus}, <b>–í–∞—à –±–∏–∑–Ω–µ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—ã–ª –∑–∞–∫—Ä—ã—Ç —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ üí£</b>
<b>–ù–µ —Å–∫–∞–∂–∏ —á—Ç–æ –º—ã –Ω–µ –≥–æ–≤–æ—Ä–∏–ª–∏</b>
                `, {
                    parse_mode: 'HTML',
                })
            } catch (err) {
                if (err.response && err.response.statusCode === 403) {
                    console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
                } else if (err.response && err.response.statusCode === 400) {
                    console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
                } else {
                    console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
                }
            }
            await collection.updateOne({ id: el.id }, {
                $set: {
                    "business.0.have": false,
                    "business.0.name": '',
                    "business.0.workers": 0,
                    "business.0.maxWorkers": 0,
                    "business.0.profit": 0,
                    "business.0.workersProfit": 0,
                    "business.0.tax": 0,
                    "business.0.lastUpdTime": 0,
                }
            })
            return;
        }

        try {
            await bot.sendMessage(el.id, `
${userDonateStatus}, <b>–°–ö–û–†–ï–ï ! –ü–ò–®–ò</b> <code>–±–∏–∑–Ω–µ—Å –Ω–∞–ª–æ–≥–∏</code>
<b>–ê —Ç–æ –ø–æ—Å–ª–µ ${daysCount} –¥–Ω—è —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ –±—É–¥–µ—Ç !</b>

<b>–°–ê–ú–ê–Ø –ì–õ–ê–í–ù–ê–Ø –ù–û–í–û–°–¢–¨ –Ø –ü–†–ò–ù–ï–° –¢–ï–ë–ï –ó–ê–†–ü–õ–ê–¢–£üòâ</b>
            `, {
                parse_mode: 'HTML',
            })
        } catch (err) {
            if (err.response && err.response.statusCode === 403) {
                console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
            } else if (err.response && err.response.statusCode === 400) {
                console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
            } else {
                console.log(customChalk.colorize(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞: ${err.message}`, { style: 'italic', background: 'bgRed' }));
            }
        }
        collection.updateOne({ id: el.id }, { $inc: { "business.0.profit": parseInt(addToProfit), "business.0.tax": parseInt(Math.floor(addToProfit / 2)) } })
    }
    return;
}

async function pulloffBusiness(msg, bot, collection) {
    const userId1 = msg.from.id
    const chatId = msg.chat.id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userprofit = user.business[0].profit
    const username = user.business[0].name

    if (username === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –±–∏–∑–Ω–µ—Å–∞

<i>–ù–∞–ø–∏—à–∏—Ç–µ:</i> <code>–±–∏–∑–Ω–µ—Å—ã</code> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±–∏–∑–Ω–µ—Å–∞—Ö
        `, { parse_mode: 'HTML' })
        return;
    }

    if (userprofit <= 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç—É –¥–µ–Ω–µ–≥ –¥–ª—è —Å–Ω—è—Ç–∏–µ —Å –±–∏–∑–Ω–µ—Å–∞
        `, { parse_mode: 'HTML' })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å –±–∏–∑–Ω–µ—Å–∞ 
<i>–°—É–º–º—É:</i> <b>${userprofit.toLocaleString('de-DE')} ${formatNumberInScientificNotation(userprofit)}</b>
    `, { parse_mode: 'HTML' })

    await collection.updateOne({ id: userId1 }, { $inc: { "business.0.profit": -userprofit, balance: userprofit } })
}

async function payTaxForBusiness(msg, bot, collection) {
    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userBalance = user.balance
    const usertax = user.business[0].tax
    const username = user.business[0].name

    if (username === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –±–∏–∑–Ω–µ—Å–∞

<i>–ù–∞–ø–∏—à–∏—Ç–µ:</i> <code>–±–∏–∑–Ω–µ—Å—ã</code> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±–∏–∑–Ω–µ—Å–∞—Ö
        `, { parse_mode: 'HTML' })
        return;
    }

    if (usertax === 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –Ω–∞–ª–æ–≥–æ–≤ –±–∏–∑–Ω–µ—Å–∞
        `, { parse_mode: "HTML" })
        return;
    }

    if (userBalance < usertax) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤ –±–∏–∑–Ω–µ—Å–∞
        `, { parse_mode: "HTML" })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –±–∏–∑–Ω–µ—Å–∞
<i>–°—É–º–º—É:</i> <b>${usertax.toLocaleString('de-DE')} ${formatNumberInScientificNotation(usertax)}</b>
    `, { parse_mode: "HTML" })
    await collection.updateOne({ id: userId1 }, { $inc: { balance: -usertax, "business.0.tax": -usertax } })
}

async function sellBusiness(msg, bot, collection) {
    const collectionBusiness = await mongoConnect('businesses')

    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const user = await collection.findOne({ id: userId1 })
    const userDonateStatus = await donatedUsers(msg, collection)
    const username = user.business[0].name
    const usertax = user.business[0].tax
    const userprofit = user.business[0].profit

    if (username === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –±–∏–∑–Ω–µ—Å–∞

<i>–ù–∞–ø–∏—à–∏—Ç–µ:</i> <code>–±–∏–∑–Ω–µ—Å—ã</code> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±–∏–∑–Ω–µ—Å–∞—Ö
        `, { parse_mode: 'HTML' })
        return;
    }

    const business = await collectionBusiness.findOne({ name: username })
    const bPriceToSell = business.price * 0.8

    if (usertax > 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –Ω–∞–ª–æ–≥–∏ !
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>–±–∏–∑–Ω–µ—Å –Ω–∞–ª–æ–≥–∏</code> —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∏—Ö
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        });
        return;
    }

    const flooredBPrice = Math.floor(bPriceToSell)
    let incBalance = flooredBPrice + userprofit
    let profitMsg = `–î–µ–Ω—å–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É –≤–∞—Å –≤ –ø—Ä–∏–±—ã–ª–µ: ${userprofit.toLocaleString('de-DE')}
—É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç`

    if (userprofit === 0) {
        profitMsg = '–£ –≤–∞—Å –Ω–µ–±—ã–ª–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–ª–∞–Ω—Å–µ –±–∏–∑–Ω–µ—Å–∞ –ø–æ—ç—Ç–æ–º—É –≤—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏–ª –≤–∞—à –±–∏–∑–Ω–µ—Å'
        incBalance = flooredBPrice
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å <u>${username}</u>
<i>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏:</i> <b>${flooredBPrice.toLocaleString('de-DE')}</b>

${profitMsg}
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
    await collection.updateOne({ id: userId1 }, { $set: { "business.0.name": '', "business.0.profit": 0, "business.0.workers": 0 } })
    await collection.updateOne({ id: userId1 }, { $inc: { balance: incBalance } })
}

async function addBusinessSpeeds(msg, bot, collection, index) {
    const text = msg.text
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const parts = text.split(' ')
    const buyAmount = parts[index]

    if (!buyAmount || isNaN(buyAmount)) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–ª-–≤–æ —É—Å–∫–æ—Ä–∏—Ç–µ–ª–µ–π
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const user = await collection.findOne({ id: userId1 })
    const userUc = user.uc

    const amount = Math.floor(buyAmount * 30)

    if (amount > userUc) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–æ–Ω–∞—Ç–Ω—ã—Ö-–≤–∞–ª—é—Ç <b>(UC)</b> 
<i>–î–ª—è –ø–æ–∫—É–ø–∫–∏ ${buyAmount}</i>
<i>–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å ${Math.floor(userUc / 30)}</i>
<b>1 —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å‚ö°Ô∏è –±–∏–∑–Ω–µ—Å–∞ —Å—Ç–æ–∏—Ç 30 UC</b>

<b>–ü–æ—á–µ–º—É –±–∏–∑–Ω–µ—Å —É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏ —Ç–∞–∫ –¥–æ—Ä–æ–≥–æ —Å—Ç–æ–∏—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–∞–≤ —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç—É 1.3X –±–æ–ª—å—à–µ –∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–ª–æ–≥–∏!</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${buyAmount}‚ö°Ô∏è –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
<i>–°—Ç–æ–∏–º–æ—Å—Ç—å:</i> <b>${amount.toLocaleString('de-DE')} UC</b>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
    await collection.updateOne({ id: userId1 }, { $inc: { "business.0.speeds": parseInt(buyAmount), uc: -amount } }).then(() => {

    }).catch(err => console.log('business bust err ' + err))
}

async function bustBusiness(msg, bot, collection) {
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const user = await collection.findOne({ id: userId1 })
    const bName = user.business[0].name
    const userDonateStatus = await donatedUsers(msg, collection)

    if (bName === '') {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –µ—à–µ –Ω–µ—Ç—É –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏–µ
<i>–ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å:</i> <code>–±–∏–∑–Ω–µ—Å—ã</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const bBusts = user.business[0].speeds
    if (bBusts === 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ—Ç—É –±–∏–∑–Ω–µ—Å —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å
<i>—á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å:/i> <code>–º–æ–π –±–∏–∑–Ω–µ—Å</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    const collectionBusiness = await mongoConnect('businesses')
    const business = await collectionBusiness.findOne({ name: bName })
    const workersProfit = business.workersProfit

    const workers = user.business[0].workers
    const workersProfitHour = Math.floor((workersProfit * workers) * 1.3)

    bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–∏–∑–Ω–µ—Å —É—Å–∫–æ—Ä–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç—É
<i>–ü–æ–ª—É—á–µ–Ω–∞:</i> <b>${workersProfitHour.toLocaleString('de-DE')} ${formatNumberInScientificNotation(workersProfitHour)} ü™Ñ[1.3X]</b>

<b>–ü—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–ª–æ–≥–∏!üéâ</b>
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
    await collection.updateOne({ id: userId1 }, { $inc: { "business.0.profit": workersProfitHour, "business.0.speeds": -1 } })
}

module.exports = {
    addBusiness,
    listBusinesses,
    buyBusiness,
    infoBusiness,
    workersInfo,
    buyWorkers,
    addProfitEveryOneHour,
    pulloffBusiness,
    payTaxForBusiness,
    manualAddProfitEveryOneHour,
    sellBusiness,
    addBusinessSpeeds,
    bustBusiness,
}
const userStates = {};
let globalParts;
let globalCrypto3;


async function cryptoShop(msg, bot, collectionCrypto) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id

    if (text.toLowerCase() == '–º–∞–≥–∞–∑–∏–Ω –∫—Ä–∏–ø—Ç—ã') {
        const crypto = await collectionCrypto.findOne({ name: 'altcoinidx' })
        const cryptoPrice = crypto.price
        const cryptoLastUpd = crypto.lastUpdateTime
        const cryptoStatus = crypto.status
        const cryptoMove = crypto.move

        let stats;
        if (cryptoStatus === true) {
            stats = '–ø—Ä–æ–¥–∞—ë—Ç—Å—è'
        }
        else {
            stats = '–Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è'
        }

        bot.sendMessage(chatId, `
<a href='tg://user?id=${userId}'>üòé–ò–≥—Ä–æ–∫</a> –í–æ—Ç –º–∞–≥–∞–∑–∏–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çüü£üåÄüí†üåê

<b>ü™™–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ALTCOINIDX
<b>üì†–¶–µ–Ω–∞:</b> ${cryptoPrice}
<b>‚åöÔ∏è–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã:</b> ${cryptoLastUpd}
<b>üìâ–î–µ–π—Å—Ç–≤–∏–µ:</b> ${cryptoMove}
<b>üèÜ–°—Ç–∞—Ç—É—Å:</b> ${stats}
        `, { parse_mode: "HTML" })
    }
}

async function buyCryptoCurrence(msg, bot, collection, collectionCrypto) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id

    const parts = text.split(' ')

    let cryptoCurName;
    let cryptoStats;
    let cryptoPrice;
    const crypto = await collectionCrypto.findOne({})
    if (parts[2] == crypto.name) {
        cryptoCurName = crypto.name
        const crypto2 = await collectionCrypto.findOne({ name: cryptoCurName })
        const cryptoStatus = crypto2.status
        const cryptoPrice2 = crypto2.price

        cryptoStats = cryptoStatus
        cryptoPrice = cryptoPrice2
    }
    else {
        cryptoCurName = false
    }

    const uniqueId = `${userId}`;

    const user = await collection.findOne({ id: userId })
    const userCard = user.bankCard[0].cardNumber
    const userCardBalance = user.bankCard[0].cardValue

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –æ–±—ä–µ–∫—Ç–µ userStates
    userStates[userId] = { state: 'mastercard', uniqueId };

    let options;
    if (chatId == userId) {
        options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: `${userCard}`, callback_data: uniqueId }],
                    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                ],
            },
        };
    }
    else {
        options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '5444 **** **** ****', callback_data: uniqueId }],
                    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                ],
            },
        };
    }

    if (text.toLowerCase().startsWith('–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É')) {
        if (parts.length == 4) {
            if (parts[2] == cryptoCurName) {
                const crypto3 = parseInt(parts[3]) * cryptoPrice
                if (!isNaN(parts[3])) {
                    if (userCardBalance >= crypto3) {
                        if (cryptoStats == true) {
                            globalParts = parts[3]
                            globalCrypto3 = crypto3
                            bot.sendMessage(chatId, `
–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
<b>${cryptoCurName}:</b> –∫–æ–ª-–≤–æ ${parts[3]}

–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ ${crypto3}
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –ø–ª–∞—Å—Ç–∏–∫ –∫–∞—Ä—Ç—ã
–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É
                            `, { parse_mode: "HTML", ...options })

                        }
                        else {
                            bot.sendMessage(chatId, '–≠—Ç–æ –∫—Ä–∏–ø—Ç–æ –≤–∞–ª—é—Ç–∞ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è')
                        }
                    }
                    else {
                        const new2 = userCardBalance / crypto3
                        bot.sendMessage(chatId, `
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á—ë—Ç–µ
–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ ${Math.floor(new2)}
                        `, { parse_mode: "HTML" })
                    }
                }

                else {
                    bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ <code>–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É [–∏–º—è –∫—Ä–∏–ø—Ç—ã] [–∫–æ–ª-–≤–æ]</code>`, { parse_mode: "HTML" })
                }
            }
            else {
                bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ <code>–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É [–∏–º—è –∫—Ä–∏–ø—Ç—ã] [–∫–æ–ª-–≤–æ]</code>`, { parse_mode: "HTML" })
            }
        }
        else {
            bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ <code>–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É [–∏–º—è –∫—Ä–∏–ø—Ç—ã] [–∫–æ–ª-–≤–æ]</code>`, { parse_mode: 'HTML' })
        }
    }
}

async function buyCryptoCurrenceBtn(msg, bot, collection) {
    const data = msg.data
    const userId = msg.from.id
    const chatId = msg.message.chat.id
    const messageId = msg.message.message_id

    const userState = userStates[userId]?.state;

    if (userState === 'mastercard') {
        if (data === userStates[userId].uniqueId) {

            // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º uniqueId
            bot.answerCallbackQuery(msg.id, { text: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏', show_alert: true });
            bot.editMessageText('–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏', {
                chat_id: chatId,
                message_id: messageId
            })
            collection.updateOne({ id: userId }, { $inc: { "crypto.0.altcoinidx": parseInt(globalParts) } })
            collection.updateOne({ id: userId }, { $inc: { "bankCard.0.cardValue": parseInt(-globalCrypto3) } })
        }
        else {
            bot.answerCallbackQuery(msg.id, { text: '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è.' });
        }
    }
}

module.exports = {
    cryptoShop,
    buyCryptoCurrence,
    buyCryptoCurrenceBtn,
}
let globalParts;
let globalCrypto3;
let globalCryptoPrice;
let globalPermission = false;

async function cryptoShop(msg, bot, collectionCrypto) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id

    if (text.toLowerCase() == '–º–∞–≥–∞–∑–∏–Ω –∫—Ä–∏–ø—Ç—ã') {
        const crypto = await collectionCrypto.findOne({ name: 'altcoinidx' })
        const cryptoPrice = crypto.price
        const cryptoLastUpd = crypto.lastUpdateTime
        const cryptoStatus = crypto.status
        const cryptoMove = crypto.move

        let stats;
        if (cryptoStatus === true) {
            stats = '–ø—Ä–æ–¥–∞—ë—Ç—Å—è'
        }
        else {
            stats = '–Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è'
        }

        bot.sendMessage(chatId, `
<a href='tg://user?id=${userId}'>üòé–ò–≥—Ä–æ–∫</a> –í–æ—Ç –º–∞–≥–∞–∑–∏–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çüü£üåÄüí†üåê

<b>ü™™–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ALTCOINIDX
<b>üì†–¶–µ–Ω–∞:</b> ${cryptoPrice}
<b>‚åöÔ∏è–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã:</b> ${cryptoLastUpd}
<b>üìâ–î–µ–π—Å—Ç–≤–∏–µ:</b> ${cryptoMove}
<b>üèÜ–°—Ç–∞—Ç—É—Å:</b> ${stats}
        `, { parse_mode: "HTML" })
    }
}

async function buyCryptoCurrence(msg, bot, collection, collectionCrypto) {
    const text = msg.text
    const userId = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id

    const parts = text.split(' ')

    let cryptoCurName;
    let cryptoStats;
    let cryptoPrice;

    const crypto = await collectionCrypto.findOne({})
    const user = await collection.findOne({ id: userId })

    const oplata = 'oplata'
    const oplataBack = 'oplataBack'

    const userCard = user.bankCard[0].cardNumber
    let options;
    if (chatId == userId) {
        options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: `${userCard}`, callback_data: `${oplata}_${userId}` }],
                    [{ text: '–ù–∞–∑–∞–¥', callback_data: `${oplataBack}_${userId}` }],
                    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ],
            },
        };
    }
    else {
        options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: `5444 **** **** ****`, callback_data: `${oplata}_${userId}` }],
                    [{ text: '–ù–∞–∑–∞–¥', callback_data: `${oplataBack}_${userId}` }],
                    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ],
            },
        };
    }

    if (text.toLowerCase().startsWith('–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É')) {
        if (parts.length == 4) {
            if (parts[2].toLowerCase() == crypto.name) {
                cryptoCurName = crypto.name
                const crypto2 = await collectionCrypto.findOne({ name: cryptoCurName })
                const cryptoStatus = crypto2.status
                const cryptoPrice2 = crypto2.price

                cryptoStats = cryptoStatus
                cryptoPrice = cryptoPrice2
                globalCryptoPrice = cryptoPrice2
            }
            else {
                cryptoCurName = false
            }
            if (parts[2].toLowerCase() == cryptoCurName) {
                const crypto3 = parseInt(parts[3]) * cryptoPrice
                if (!isNaN(parts[3]) && parts[3] > 0) {
                    if (cryptoStats == true) {
                        globalParts = parts[3]
                        globalCrypto3 = crypto3
                        const userCheckPayment = user.checkPayment
                        if (userCheckPayment == 'not') {
                            collection.updateOne({ id: userId }, { $set: { checkPayment: `mastercard_${userCard}` } })
                        }
                        else {
                            console.log('no');
                        }

                        bot.sendMessage(chatId, `
–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
<b>${cryptoCurName}:</b> –∫–æ–ª-–≤–æ ${parts[3]}

–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ ${crypto3}
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –ø–ª–∞—Å—Ç–∏–∫ –∫–∞—Ä—Ç—ã
–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É
                        `, { parse_mode: "HTML", ...options, reply_to_message_id: messageId, })
                            .then((sentMessage) => {
                                // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                const messageId = sentMessage.message_id;
                                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 6 —Å–µ–∫—É–Ω–¥
                                setTimeout(() => {
                                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å."
                                    // if (globalPermission != true) {
                                    bot.editMessageText(`–í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞–¥–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–≤–æ–µ–π –ø–ª–∞—Å—Ç–∏–∫ –∫–∞—Ä—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 6 —Å–µ–∫—É–Ω–¥`, { chat_id: chatId, message_id: messageId, });
                                    // }
                                    collection.updateOne({ id: userId }, { $set: { checkPayment: 'not' } })
                                }, 20000);
                            });
                    }
                    else {
                        bot.sendMessage(chatId, '–≠—Ç–æ –∫—Ä–∏–ø—Ç–æ –≤–∞–ª—é—Ç–∞ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', { reply_to_message_id: messageId, })
                    }
                }
                else {
                    bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ <code>–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É [–∏–º—è –∫—Ä–∏–ø—Ç—ã] [–∫–æ–ª-–≤–æ]</code> –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ 0 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ –≤–∞–ª—é—Ç`, { parse_mode: "HTML", reply_to_message_id: messageId, })
                }
            }
            else {
                bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ <code>–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É [–∏–º—è –∫—Ä–∏–ø—Ç—ã] [–∫–æ–ª-–≤–æ]</code>`, { parse_mode: "HTML", reply_to_message_id: messageId, })
            }
        }
        else {
            bot.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ <code>–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É [–∏–º—è –∫—Ä–∏–ø—Ç—ã] [–∫–æ–ª-–≤–æ]</code>`, { parse_mode: 'HTML', reply_to_message_id: messageId, })
        }
    }
}

async function buyCryptoCurrenceBtn(msg, bot, collection) {
    const data = msg.data
    const userId = msg.from.id
    const chatId = msg.message.chat.id
    const messageId = msg.message.message_id

    const [oplate, buttonUserId] = data.split('_');
    const user = await collection.findOne({ id: userId })
    const userCardNum = user.bankCard[0].cardNumber
    const userCheck = user.checkPayment


    if (oplate === 'oplata') {
        if (`mastercard_${userCardNum}` === userCheck  && buttonUserId === String(userId)) {
            const userCardBalance = user.bankCard[0].cardValue

            if (userCardBalance >= globalCrypto3) {

                // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º uniqueId
                bot.answerCallbackQuery(msg.id, { text: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏', show_alert: true });
                bot.editMessageText(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–∫—É–ø–∫—É\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç—ã ${globalParts} altcoinidx`, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'HTML',
                    reply_to_message_id: messageId,
                })
                collection.updateOne({ id: userId }, { $inc: { "crypto.0.altcoinidx": parseInt(globalParts) } })
                collection.updateOne({ id: userId }, { $inc: { "bankCard.0.cardValue": parseInt(-globalCrypto3) } })

                collection.updateOne({ id: userId }, { $set: { checkPayment: 'not' } });
                globalPermission = true
            }
            else {
                const new2 = userCardBalance > globalCryptoPrice ? userCardBalance / globalCryptoPrice : 0
                if (userCardBalance > globalCryptoPrice) {
                    bot.editMessageText(`
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á—ë—Ç–µ
–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ ${Math.floor(new2)}
                    `, {
                        parse_mode: "HTML",
                        chat_id: chatId,
                        message_id: messageId,
                        reply_to_message_id: messageId,
                    })
                    collection.updateOne({ id: userId }, { $set: { checkPayment: 'not' } });
                    globalPermission = true
                }
                else {
                    bot.editMessageText(`
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á—ë—Ç–µ
–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å
                    `, {
                        parse_mode: "HTML",
                        chat_id: chatId,
                        message_id: messageId,
                        reply_to_message_id: messageId,
                    })
                    collection.updateOne({ id: userId }, { $set: { checkPayment: 'not' } });
                    globalPermission = true
                }
            }
        }
        else {
            bot.answerCallbackQuery(msg.id, { text: '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è.' });
        }
    }
    if (oplate === 'oplataBack') {
        if (`mastercard_${userCardNum}` === userCheck  && buttonUserId === String(userId)) {
            bot.answerCallbackQuery(msg.id, { text: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É', show_alert: true });
            bot.editMessageText(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É\n–í–∞–º –Ω–µ —á–µ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç—ã`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'HTML'
            })

            collection.updateOne({ id: userId }, { $set: { checkPayment: 'not' } });
            globalPermission = true
        }
        else {
            bot.answerCallbackQuery(msg.id, { text: '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è.' });
        }
    }
}

module.exports = {
    cryptoShop,
    buyCryptoCurrence,
    buyCryptoCurrenceBtn,
}
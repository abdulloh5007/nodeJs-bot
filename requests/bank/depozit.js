const { donatedUsers } = require("../donate/donatedUsers")
const { formatNumberInScientificNotation, parseNumber } = require("../systems/systemRu")

/**
 * Retrieves information about a user's deposit and sends a message with the details to a chat.
 * Includes options for deposit replenishment and withdrawal.
 * 
 * @param {object} msg - The message object containing information about the user and chat.
 * @param {object} bot - The bot object used to send messages.
 * @param {object} collection - The collection object used to query the database.
 * @returns {Promise<void>}
 */
async function userDepozit(msg, bot, collection) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;
  const messageId = msg.message_id;

  const userDonateStatus = await donatedUsers(msg, collection);
  const user = await collection.findOne({ id: userId });
  const depozit = user.depozit[0];

  const depBalance = depozit.balance;
  const depLimit = depozit.limit;
  const depProcent = depozit.procent;
  const depDate = depozit.date;

  const findDepDate = depDate !== 0 ? `<i>‚åõÔ∏è–î–∞—Ç–∞ —Å–Ω—è—Ç–∏–µ: <b>${depDate.toLocaleString()}</b></i>\n` : '';

  const newDepDate = new Date().getDate();
  const dateDepDate = new Date(depDate).getDate();
  const findDepDateToBtn = depDate === 0 ? 999 : dateDepDate;

  const depOpts = {
    reply_markup: {
      inline_keyboard: [
        [
            { text: '‚öñÔ∏è–î–µ–ø–æ–∑–∏—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å', switch_inline_query_current_chat: '–¥–µ–ø–æ–∑–∏—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å ' }, { text: '‚öôÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç', switch_inline_query_current_chat: '+–¥–µ–ø –ø—Ä–æ—Ü–µ–Ω—Ç' }
            ],
        newDepDate >= findDepDateToBtn ? [{ text: 'üí∞–°–Ω—è—Ç—å', callback_data: `pull_money_depozit__${userId}` }] : []
      ]
    }
  };

  const message = `
${userDonateStatus}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –¥–µ–ø–æ–∑–∏—Ç–µ

<i>üí≥–í–∞—à –±–∞–ª–∞–Ω—Å –≤ –¥–µ–ø–æ–∑–∏—Ç–µ:</i> <b>${depBalance.toLocaleString('de-DE')} ${formatNumberInScientificNotation(depBalance)}</b>
<i>üì≤–õ–∏–º–∏—Ç:</i> <b>${depLimit.toLocaleString('de-DE')} ${formatNumberInScientificNotation(depLimit)}</b>
<i>üíπ–ü—Ä–æ—Ü–µ–Ω—Ç:</i> <b>${depProcent} %</b>
${findDepDate}
<b>„ÄΩÔ∏è–ü—Ä–æ—Ü–µ–Ω—Ç –±—É–¥–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å—Å—è —Å–º–æ—Ç—Ä—è –Ω–∞ –≤–∞—à —Å—Ç–∞—Ç—É—Å !</b> üèÜ
<b>‚èπ–ö–Ω–æ–ø–∫–∞ —Å–Ω—è—Ç—å –ø–æ—è–≤–∏—Ç—å—Å—è –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –¥–∞—Ç–∞ —Å–Ω—è—Ç–∏–µ</b> ü§ñ
  `;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'HTML',
    reply_to_message_id: messageId,
    ...depOpts,
  });
}

async function depozitAddMoney(msg, bot, collection, glLength) {
    const userId1 = msg.from.id
    const chatId = msg.chat.id
    const messageId = msg.message_id
    const text = msg.text

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const userBalance = user.balance
    const depLimit = user.depozit[0].limit
    const depBalance = user.depozit[0].balance
    const depDate = user.depozit[0].date
    const testDate = new Date().getDate()
    const dateDepDate = new Date(depDate).getDate()

    const parts = text.split(' ')
    let depMoney = parts[glLength]
    const date = new Date()
    date.setDate(date.getDate() + 1);

    if (depMoney === undefined || isNaN(depMoney) || depMoney <= 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>–¥–µ–ø–æ–∑–∏—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å [—Å—É–º–º–∞]</code>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    depMoney = parseInt(parseNumber(parts[glLength]))

    if (userBalance < depMoney) {
        bot.sendMessage(chatId, `
${userDonateStatus}, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–ª–∞–Ω—Å–µ —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç

<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${userBalance.toLocaleString('de-DE')} ${formatNumberInScientificNotation(userBalance)}
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (parseInt(depBalance) + parseInt(depMoney) > depLimit) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã –Ω–µ–º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–Ω–∏—Ç—å <b>${depMoney.toLocaleString('de-DE')}</b>, —ç—Ç–æ —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –ª–∏–º–∏—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–µ–Ω—å—à–µ —Å—É–º–º—ã
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (dateDepDate < testDate && depDate !== 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞ —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è —É–∂–µ –≤—ã—à–ª–æ

<b>–ù–∞–¥–æ —Å–Ω–∞—á–∞–ª–æ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏!</b>
<b>–ü–æ—Ç–æ–º –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞ —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—Ç–µ</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        return;
    }

    if (depBalance !== 0) {
        bot.sendMessage(chatId, `
${userDonateStatus}, üòÅ–≤—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –¥–µ–Ω—å–≥–∏ <b>${depMoney.toLocaleString('de-DE')}</b> –≤ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç —Å—á–µ—Ç –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∏–∑–º–µ–Ω–∏–≤ –≤—Ä–µ–º—è —Å–Ω—è—Ç–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞üí≥

<b>ü§µ–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ–Ω–µ–≥ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω—è—Ç–∏—è !</b>
        `, {
            parse_mode: 'HTML',
            reply_to_message_id: messageId,
        })
        await collection.updateOne({ id: userId1 }, {
            $inc: {
                "depozit.0.balance": depMoney,
                balance: -depMoney,
            }
        })
        return;
    }

    bot.sendMessage(chatId, `
${userDonateStatus}, üòé–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ –≤ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç <b>${depMoney.toLocaleString('de-DE')}</b>üí≥

<b>üìÜ–î–∞—Ç–∞ —Å–Ω—è—Ç–∏–µ:</b> ${date.toLocaleString()}
    `, {
        parse_mode: 'HTML',
        reply_to_message_id: messageId,
    })
    await collection.updateOne({ id: userId1 }, {
        $inc: {
            "depozit.0.balance": depMoney,
            balance: -depMoney,
        }
    })
    await collection.updateOne({ id: userId1 }, { $set: { "depozit.0.date": date, } })
}

async function pullMoneyDepozit(msg, bot, collection) {
    const data = msg.data
    const userId1 = msg.from.id
    const chatId = msg.message.chat.id
    const messageId = msg.message.message_id

    const userDonateStatus = await donatedUsers(msg, collection)
    const user = await collection.findOne({ id: userId1 })
    const depBalance = user.depozit[0].balance
    const depProcent = user.depozit[0].procent
    const result = Math.floor((depBalance / 100) * depProcent);
    const finishedResult = parseInt(depBalance) + parseInt(result)

    const parts = data.split('__')

    if (parts[0] === 'pull_money_depozit') {
        if (parts[1] != userId1) {
            bot.answerCallbackQuery(msg.id, `–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è`)
            return;
        }

        if (depBalance <= 0) {
            bot.sendMessage(chatId, `
    ${userDonateStatus}, –£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç—É –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–µ–ø–æ–∑–∏—Ç–∞
            `, {
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
            })
            return;
        }

        await bot.editMessageText(`
${userDonateStatus}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ –¥–µ–Ω–µ–≥ —Å –¥–µ–ø–æ–∑–∏—Ç–∞ 

<b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> <i>${depProcent}%</i>
<b>–°—É–º–º–∞ —Å–Ω—è—Ç–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> <i>${finishedResult.toLocaleString('de-DE')} ${formatNumberInScientificNotation(finishedResult)}</i>
        `, {
            parse_mode: 'HTML',
            chat_id: chatId,
            message_id: messageId,
        })
        await collection.updateOne({ id: userId1 }, { $inc: { balance: Math.floor(finishedResult) } })
        await collection.updateOne({ id: userId1 }, {
            $set: {
                "depozit.0.balance": 0,
                "depozit.0.date": 0,
            }
        })
    }
}

module.exports = {
    userDepozit,
    depozitAddMoney,
    pullMoneyDepozit,
}